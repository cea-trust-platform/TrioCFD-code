#Pmacro IJ_LOOP(SCALARTYPE,IMAX,JMAX,KERNEL_MACRO,END_ILOOP_MACRO)
{
  const int imax = IMAX;
  const int jmax = JMAX;
  const int vsize = Simd_SCALARTYPE::size();
  for (int j = 0; ; j++) {
    for (int i = 0; i < imax; i += vsize) { #Pusemacro(KERNEL_MACRO)(Simd_SCALARTYPE) }
    // do not execute end_iloop at last iteration (because of assert on valid j+1)
    if (j+1==jmax)
      break; 
#Pusemacro(END_ILOOP_MACRO)()
  }
}
#Pendmacro(IJ_LOOP)

#Pmacro IJ_LOOP_MINMAX(SCALARTYPE,IMIN,JMIN,IMAX,JMAX,KERNEL_MACRO,END_ILOOP_MACRO)
{
  const int vsize = Simd_SCALARTYPE::size();
  const int imax = IMAX;
  const int imax1 = imax - (vsize-1); // test to check for end of vectorizable part
  const int jmax = JMAX;
  for (int j = JMIN; ; j++) {
    int i;
    for (i = IMIN; i < 0; i++) { #Pusemacro(KERNEL_MACRO)(SCALARTYPE) }
    for (i = 0; i < imax1; i += vsize) { #Pusemacro(KERNEL_MACRO)(Simd_SCALARTYPE) }
    for (; i < imax; i++) { #Pusemacro(KERNEL_MACRO)(SCALARTYPE) }
    // do not execute end_iloop at last iteration (because of assert on valid j+1)
    if (j+1==jmax)
      break; 
#Pusemacro(END_ILOOP_MACRO)()
  }
}
#Pendmacro(IJ_LOOP_MINMAX)
