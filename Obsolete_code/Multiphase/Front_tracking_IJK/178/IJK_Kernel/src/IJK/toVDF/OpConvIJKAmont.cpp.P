/****************************************************************************
* Copyright (c) 2015 - 2016, CEA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
* 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
* 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
* OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*****************************************************************************/
/////////////////////////////////////////////////////////////////////////////
//
// File      : OpConvIJKAmont.cpp
// Directory : $IJK_ROOT/src/IJK/OpVDF
//
/////////////////////////////////////////////////////////////////////////////
#include <OpConvIJKAmont.h>
#include <Statistiques.h>

#Pinclude(IJ_LOOP_P)

#Pmacro DEFMACRO(ST)

void OpConvAmontIJK_ST::initialize(const IJK_Splitting & splitting)
{
  channel_data_.initialize(splitting);
}

void OpConvAmontIJK_ST::calculer(const IJK_Field_ST & inputx, const IJK_Field_ST & inputy, const IJK_Field_ST & inputz, 
				   const IJK_Field_ST & vx, const IJK_Field_ST & vy, const IJK_Field_ST & vz, 
				   IJK_Field_ST & dvx, IJK_Field_ST & dvy, IJK_Field_ST & dvz)
{
  vx_ = &vx;
  vy_ = &vy;
  vz_ = &vz;
  inputx_ = &inputx;
  inputy_ = &inputy;
  inputz_ = &inputz;

  compute_set(dvx, dvy, dvz);

  vx_ = vy_ = vz_ = inputx_ = inputy_ = inputz_ = 0;
}

void OpConvAmontIJK_ST::ajouter(const IJK_Field_ST & inputx, const IJK_Field_ST & inputy, const IJK_Field_ST & inputz, 
				  const IJK_Field_ST & vx, const IJK_Field_ST & vy, const IJK_Field_ST & vz, 
				  IJK_Field_ST & dvx, IJK_Field_ST & dvy, IJK_Field_ST & dvz)
{
  vx_ = &vx;
  vy_ = &vy;
  vz_ = &vz;
  inputx_ = &inputx;
  inputy_ = &inputy;
  inputz_ = &inputz;

  compute_add(dvx, dvy, dvz);

  vx_ = vy_ = vz_ = inputx_ = inputy_ = inputz_ = 0;
}

#Pforeach DIR (x y z)
#Pforeach COMPO (x y z)
// Description: compute fluxes in direction DIR for velocity component COMPO
//  for the layer of fluxes k_layer
// 4-th order centered convection scheme
void OpConvAmontIJK_ST::compute_flux_DIR_vCOMPO(IJK_Field_local_ST & resu, const int k_layer)
{
  // convected field
  const IJK_Field_local_ST & src = *inputCOMPO_;
  // Convected vector field:
  ConstIJK_ST_ptr src_ptr(src, 0, 0, k_layer);
  // Velocity in DIR direction (convecting velocity)
  ConstIJK_ST_ptr vconvDIR_ptr(*vDIR_, 0, 0, k_layer);

#Pif ("DIR"=="x")
  const int idir = 0;
  const int nx = src.ni() + 1;
  const int ny = src.nj();
#Pelif ("DIR"=="y")
  const int idir = 1;
  const int nx = src.ni();
  const int ny = src.nj() + 1;
#Pelif ("DIR"=="z")
  const int idir = 2;
  const int nx = src.ni();
  const int ny = src.nj();
#Pendif
#Pif ("COMPO"=="x")
  const int icompo = 0;
#Pelif ("COMPO"=="y")
  const int icompo = 1;
#Pelif ("COMPO"=="z")
  const int icompo = 2;
#Pendif

  // Result (fluxes in direction DIR for component COMPO of the convected field)
  IJK_ST_ptr resu_ptr(resu, 0, 0, 0);

#Pmacro KERNEL_FLUX(__TYPE__)
  // specific coding for uniform mesh in x and y: surfaces are constant on an xy plane
  __TYPE__ vit_0,vit_1; // 2 adjacent velocity values
  src_ptr.get_left_center_DIR(i,vit_0,vit_1);
  // get convecting velocity
  __TYPE__ vconv0, vconv1;
  vconvDIR_ptr.get_left_center_COMPO(i, vconv0, vconv1);

  // Average of the convecting velocity (copied from Eval_Amont_VDF_Face : not weighted)
  __TYPE__ psc = (vconv0 + vconv1) * half_surface;
  __TYPE__ upwind_velocity = select_ST(psc, 0., vit_1 /* if psc < 0 */, vit_0 /* if psc > 0 */);
  __TYPE__ flux = psc * upwind_velocity;
  resu_ptr.put_val(i, flux);
#Pendmacro(KERNEL_FLUX)

#Pmacro KERNEL_FLUX_NEXTJ()
  // instructions to perform to jump to next row
  src_ptr.next_j();
  resu_ptr.next_j();
  vconvDIR_ptr.next_j();
#Pendmacro(KERNEL_FLUX_NEXTJ)

  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = channel_data_.first_global_k_layer_flux(icompo, idir);
  const int last_global_k_layer = channel_data_.last_global_k_layer_flux(icompo, idir);

  if (global_k_layer < first_global_k_layer || global_k_layer > last_global_k_layer) {
    // We are in the wall
    putzero(resu);
    return;
  }

  ST half_surface = channel_data_.get_surface(k_layer, icompo, idir) * 0.5;
#Pusemacro(IJ_LOOP)(ST,nx,ny,KERNEL_FLUX,KERNEL_FLUX_NEXTJ)
}

#Pendforeach(COMPO)
#Pendforeach(DIR)
#Pendmacro(DEFMACRO)

#Pusemacro(DEFMACRO)(double)

