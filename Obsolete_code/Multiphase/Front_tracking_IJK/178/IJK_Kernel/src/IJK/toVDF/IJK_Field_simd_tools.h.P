/****************************************************************************
* Copyright (c) 2015 - 2016, CEA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
* 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
* 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
* OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*****************************************************************************/
/////////////////////////////////////////////////////////////////////////////
//
// File      : IJK_Field_simd_tools.h
// Directory : $IJK_ROOT/src/IJK/OpVDF
//
/////////////////////////////////////////////////////////////////////////////
#ifndef IJK_Field_simd_tools_h
#define IJK_Field_simd_tools_h
#include <IJK_Field.h>
#include <simd_tools.h>

#Pmacro SCALAR_SIMD_GET(ST)

// .DESCRIPTION 
//  This class implements a accessor to IJK_Field values.
//  It provides efficient access to center, left and right neighbours en i, j, and k directions
//   and checks if i,j,k are within the bounds

class ConstIJK_ST_ptr
{
 public:
  // Description: builds a pointer to field(i,j,k);
  ConstIJK_ST_ptr(const IJK_Field_local_ST & field, int i, int j, int k) {
    ptr_ = &field(i, j, k);
    j_stride_ = field.j_stride();
    k_stride_ = field.k_stride();
#ifndef NDEBUG
    const int ghost = field.ghost();
    i_min_ = - ghost; 
    i_max_ = field.ni() + ghost;
    j_min_ = - ghost;
    j_max_ = field.nj() + ghost;
    k_min_ = - ghost;
    k_max_ = field.nk() + ghost;
    i_ = i;
    j_ = j;
    k_ = k;
#endif
  }
  // Description: increments the pointer by j_stride (eg, j = j+1)
  void next_j() {
    ptr_ += j_stride_;
#ifndef NDEBUG
    j_++;
    assert(j_ < j_max_);
#endif
  }
  // Description: returns field(i+i_offset, j, k)
  void get_center(int i_offset, ST & center) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    center = ptr_[i_offset];
  }
  // Description: returns left=field(i+i_offset-1, j, k) and center=field(i+i_offset, j, k)
  void get_left_center_x(int i_offset, ST & left, ST & center) const {
    assert(i_ + i_offset > i_min_ && i_ + i_offset < i_max_);
    left = ptr_[i_offset - 1];
    center = ptr_[i_offset];
  }
  void get_center_right_x(int i_offset, ST & center, ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset + 1 < i_max_);
    center = ptr_[i_offset];
    right = ptr_[i_offset + 1];
  }
  void get_left_center_right_x(int i_offset, ST & left, ST & center, ST & right) const {
    assert(i_ + i_offset > i_min_ && i_ + i_offset + 1 < i_max_);
    left = ptr_[i_offset - 1];
    center = ptr_[i_offset];
    right = ptr_[i_offset + 1];
  }
  void get_left_center_y(int i_offset, ST & left, ST & center) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(j_ - 1 >= j_min_);
    center = ptr_[i_offset];
    left = ptr_[i_offset - j_stride_];
  }
  void get_center_right_y(int i_offset, ST & center, ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(j_ >= j_min_ && j_ + 1 <= j_max_);
    center = ptr_[i_offset];
    right = ptr_[i_offset + j_stride_];
  }
  void get_left_center_right_y(int i_offset, ST & left, ST & center, ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(j_ - 1 >= j_min_ && j_ + 1 <= j_max_);
    center = ptr_[i_offset];
    left = ptr_[i_offset - j_stride_];
    right = ptr_[i_offset + j_stride_];
  }
  void get_left_center_z(int i_offset, ST & left, ST & center) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(k_ - 1 >= k_min_);
    center = ptr_[i_offset];
    left = ptr_[i_offset - k_stride_];
  }
  void get_center_right_z(int i_offset, ST & center, ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(k_ + 1 < k_max_);
    center = ptr_[i_offset];
    right = ptr_[i_offset + k_stride_];
  }
  void get_left_center_right_z(int i_offset, ST & left, ST & center, ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(k_ - 1 >= k_min_ && k_ + 1 < k_max_);
    center = ptr_[i_offset];
    left = ptr_[i_offset - k_stride_];
    right = ptr_[i_offset + k_stride_];
  }
  void get_center(int i_offset, Simd_ST & center) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    center = SimdGet(ptr_ + i_offset);
  }
  void get_left_center_x(int i_offset, Simd_ST & left, Simd_ST & center) const {
    assert(i_ + i_offset - 1 >= i_min_ && i_ + i_offset < i_max_);
    SimdGetLeftCenter(ptr_ + i_offset, left, center);
  }
  void get_center_right_x(int i_offset, Simd_ST & center, Simd_ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset + 1 < i_max_);
    SimdGetCenterRight(ptr_ + i_offset, center, right);
  }
  void get_left_center_right_x(int i_offset, Simd_ST & left, Simd_ST & center, Simd_ST & right) const {
    assert(i_ + i_offset - 1 >= i_min_ && i_ + i_offset + 1 < i_max_);
    SimdGetLeftCenterRight(ptr_ + i_offset, left, center, right);
  }
  void get_left_center_y(int i_offset, Simd_ST & left, Simd_ST & center) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(j_ - 1 >= j_min_);
    center = SimdGet(ptr_ + i_offset);
    left = SimdGet(ptr_ + i_offset - j_stride_);
  }
  void get_center_right_y(int i_offset, Simd_ST & center, Simd_ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(j_ + 1 <= j_max_);
    center = SimdGet(ptr_ + i_offset);
    right = SimdGet(ptr_ + i_offset + j_stride_);
  }
  void get_left_center_right_y(int i_offset, Simd_ST & left, Simd_ST & center, Simd_ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(j_ - 1 >= j_min_ && j_ + 1 <= j_max_);
    center = SimdGet(ptr_ + i_offset);
    left = SimdGet(ptr_ + i_offset - j_stride_);
    right = SimdGet(ptr_ + i_offset + j_stride_);
  }
  void get_left_center_z(int i_offset, Simd_ST & left, Simd_ST & center) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(k_ - 1 >= k_min_);
    center = SimdGet(ptr_ + i_offset);
    left = SimdGet(ptr_ + i_offset - k_stride_);
  }
  void get_center_right_z(int i_offset, Simd_ST & center, Simd_ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(k_ + 1 <= k_max_);
    center = SimdGet(ptr_ + i_offset);
    right = SimdGet(ptr_ + i_offset + k_stride_);
  }
  void get_left_center_right_z(int i_offset, Simd_ST & left, Simd_ST & center, Simd_ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    assert(k_ - 1 >= k_min_ && k_ + 1 <= k_max_);
    center = SimdGet(ptr_ + i_offset);
    left = SimdGet(ptr_ + i_offset - k_stride_);
    right = SimdGet(ptr_ + i_offset + k_stride_);
  }
  void get_leftleft_left_center_right_x(int i_offset, Simd_ST & leftleft, Simd_ST & left, Simd_ST & center, Simd_ST & right) const {
    assert(i_ + i_offset - 2 >= i_min_ && i_ + i_offset + 1 < i_max_);
    SimdGetLeftleftLeftCenterRight(ptr_ + i_offset, leftleft, left, center, right);
  }
  void get_leftleft_left_center_right_y(int i_offset, Simd_ST & leftleft, Simd_ST & left, Simd_ST & center, Simd_ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset <= i_max_);
    assert(j_ - 2 >= j_min_ && j_ + 1 < j_max_);
    leftleft = SimdGet(ptr_ + i_offset - 2 * j_stride_);
    left     = SimdGet(ptr_ + i_offset - j_stride_);
    center   = SimdGet(ptr_ + i_offset);
    right    = SimdGet(ptr_ + i_offset + j_stride_);
  }
  void get_leftleft_left_center_right_z(int i_offset, Simd_ST & leftleft, Simd_ST & left, Simd_ST & center, Simd_ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset <= i_max_);
    assert(k_ - 2 >= k_min_ && k_ + 1 < k_max_);
    leftleft = SimdGet(ptr_ + i_offset - 2 * k_stride_);
    left     = SimdGet(ptr_ + i_offset - k_stride_);
    center   = SimdGet(ptr_ + i_offset);
    right    = SimdGet(ptr_ + i_offset + k_stride_);
  }
  void get_leftleft_left_center_right_x(int i_offset, ST & leftleft, ST & left, ST & center, ST & right) const {
    assert(i_ + i_offset - 2 >= i_min_ && i_ + i_offset + 1 < i_max_);
    leftleft = ptr_[i_offset-2];
    left     = ptr_[i_offset-1];
    center   = ptr_[i_offset];
    right    = ptr_[i_offset+1];
  }
  void get_leftleft_left_center_right_y(int i_offset, ST & leftleft, ST & left, ST & center, ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset <= i_max_);
    assert(j_ - 2 >= j_min_ && j_ + 1 < j_max_);
    leftleft = ptr_[i_offset-2*j_stride_];
    left     = ptr_[i_offset-j_stride_];
    center   = ptr_[i_offset];
    right    = ptr_[i_offset+j_stride_];
    
  }
  void get_leftleft_left_center_right_z(int i_offset, ST & leftleft, ST & left, ST & center, ST & right) const {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset <= i_max_);
    assert(k_ - 2 >= k_min_ && k_ + 1 < k_max_);
    leftleft = ptr_[i_offset-2*k_stride_];
    left     = ptr_[i_offset-k_stride_];
    center   = ptr_[i_offset];
    right    = ptr_[i_offset+k_stride_];
  }
#Pforeach A(x y z) 
#Pforeach B(x y z)
#Pif("A"!="B")
  void get_left_center_AB(int i_offset, Simd_ST &leftA_leftB, Simd_ST &leftA_centerB, Simd_ST &centerA_leftB, Simd_ST &centerA_centerB) {
#Pif("A"!="x" and "B"!="x")
    leftA_leftB = SimdGet(ptr_ + i_offset - j_stride_ - k_stride_);
    leftA_centerB = SimdGet(ptr_ + i_offset - #Pif("A"=="y")j_stride_#Pelsek_stride_#Pendif);
    centerA_leftB = SimdGet(ptr_ + i_offset - #Pif("B"=="y")j_stride_#Pelsek_stride_#Pendif);
    centerA_centerB = SimdGet(ptr_ + i_offset);
#Pelif("A"=="x")
    SimdGetLeftCenter(ptr_ + i_offset - #Pif("B"=="y")j_stride_#Pelsek_stride_#Pendif, leftA_leftB, centerA_leftB);
    SimdGetLeftCenter(ptr_ + i_offset, leftA_centerB, centerA_centerB);
#Pelse
    SimdGetLeftCenter(ptr_ + i_offset - #Pif("A"=="y")j_stride_#Pelsek_stride_#Pendif, leftA_leftB, leftA_centerB);
    SimdGetLeftCenter(ptr_ + i_offset, centerA_leftB, centerA_centerB);
#Pendif
  }
#Pendif
#Pendforeach(B)
#Pendforeach(A)

 protected:
  const ST *ptr_; // pointer to the current location inside the IJK_Field
  int j_stride_; // local copy of field_.j_stride()
  int k_stride_; // idem
#ifndef NDEBUG
  // legal bounds
  int i_min_, i_max_, j_min_, j_max_, k_min_, k_max_;
  // current location of ptr_
  int i_, j_, k_;
#endif
};

// We can automaticaly cast an IJK_ST_ptr to a constIJK_ST_ptr but not reversed.
class IJK_ST_ptr : public ConstIJK_ST_ptr
{
 public:
  IJK_ST_ptr(IJK_Field_local_ST & field, int i, int j, int k): ConstIJK_ST_ptr(field, i, j, k) { 
  }
    // Description: Performs the assignment: field(i+i_offset,j,k) = val
  void put_val(int i_offset, const ST & val) {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    // cast en non const ok car on avait un IJK_Field_ST non const au depart
    ((ST*)ptr_)[i_offset] = val;
  }
  void put_val(int i_offset, const Simd_ST & val) {
    assert(i_ + i_offset >= i_min_ && i_ + i_offset < i_max_);
    SimdPut((ST*)ptr_ + i_offset, val);
  }
};

#Pendmacro(SCALAR_SIMD_GET)

#Pusemacro(SCALAR_SIMD_GET)(float)
#Pusemacro(SCALAR_SIMD_GET)(double)

#endif
