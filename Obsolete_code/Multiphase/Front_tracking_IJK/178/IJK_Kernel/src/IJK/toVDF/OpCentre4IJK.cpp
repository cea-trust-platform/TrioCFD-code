/****************************************************************************
* Copyright (c) 2015 - 2016, CEA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
* 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
* 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
* OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*****************************************************************************/
/////////////////////////////////////////////////////////////////////////////
//
// File      : OpCentre4IJK.cpp
// Directory : $IJK_ROOT/src/IJK/OpVDF
//
/////////////////////////////////////////////////////////////////////////////
//#include <Op_Conv_centre4_VDF_Face_IJK.h>
//
// WARNING: DO NOT EDIT THIS FILE! Only edit the template file OpCentre4IJK.cpp.P
//
#include <OpCentre4IJK.h>
#include <Statistiques.h>

inline void calcul_g(const double& dxam, const double& dx, const double& dxav, double& g1, double& g2, double& g3, double& g4)
{
  g1 = -dx*dx*(dx/2+dxav)/(4*(dx+dxam+dxav)*(dx+dxam)*dxam);
  g2 =  (dx+2*dxam)*(dx+2*dxav)/(8*dxam*(dx+dxav));
  g3 =  (dx+2*dxam)*(dx+2*dxav)/(8*dxav*(dx+dxam));
  g4 = -dx*dx*(dx/2+dxam)/(4*(dx+dxam+dxav)*dxav*(dx+dxav));
}





// g contains one line per flux computed in the z direction.
// The first flux at index 0 is juste before the first face owned by the processor.
// offset is the index in the global mesh of the first element on this processor in direction z
// istart, iend: index of the first and last fluxes computed with 4-th order, others are 2-nd order.
// is_z_component: shall we compute coefficients for interpolation for velocity_z or for velocity_x and velocity_y ?
// delta_z is the size of the cells on this processor, we need 2 ghost cells
static void fill_g_compo(DoubleTab& g, int nb_values, int offset,
                         int istart, int iend,
                         const ArrOfDouble_with_ghost& delta_z, bool is_z_component)
{
  g.resize(nb_values, 4);
  for (int i = 0; i < nb_values; i++)
    {
      if (i + offset < istart || i + offset > iend)
        {
          // We are in the wall or in the first layer: degenerate coefficients for 2nd order interpolation
          g(i,0) = 0.;
          g(i,1) = 0.5;
          g(i,2) = 0.5;
          g(i,3) = 0.;
        }
      else
        {
          double d1, d2, d3;
          if (is_z_component)
            {
              // Filtering coefficients for faces oriented in z: interval between faces is the cell size
              d1 = delta_z[i-2];
              d2 = delta_z[i-1];
              d3 = delta_z[i];
            }
          else
            {
              // Filtering coefficients for faces oriented in x or y: interval between centers of faces is this:
              d1 = (delta_z[i-2] + delta_z[i-1]) * 0.5;
              d2 = (delta_z[i-1] + delta_z[i]) * 0.5;
              d3 = (delta_z[i]   + delta_z[i+1]) * 0.5;
            }
          calcul_g(d1, d2, d3, g(i,0), g(i,1), g(i,2), g(i,3));
        }
    }
}

void OpConvCentre4IJK_double::initialize(const IJK_Splitting& splitting)
{
  channel_data_.initialize(splitting);

  {
    perio_k_= splitting.get_grid_geometry().get_periodic_flag(DIRECTION_K);
    // Fill 4-th order filtering coefficients for z direction:
    const int nb_xfaces = splitting.get_nb_faces_local(0 /* for component x */, 2 /* in direction z */);
    const int nb_zfaces = splitting.get_nb_faces_local(2 /* for component z */, 2 /* in direction z */);
    // number of flux values computed on this processor in direction k
    // equals the number of faces owned by the processor, plus 1

    const int offset_to_global_k_layer = channel_data_.offset_to_global_k_layer();
    const ArrOfDouble_with_ghost& delta_z = channel_data_.get_delta_z();

    // first flux computed with 4th order is 1 layer after the first non zero flux, after the wall.
    // SPECIFIC FOR CHANNEL WITH WALLS IN K DIRECTION !
    int istart, iend;
    istart = channel_data_.first_global_k_layer_flux(0 /* compo */, 2 /* dir */) + 1;
    iend = channel_data_.last_global_k_layer_flux(0 /* compo */, 2 /* dir */) - 1;
    fill_g_compo(g_compo_xy_dir_z_, nb_xfaces + 1, offset_to_global_k_layer, istart, iend, delta_z, false);

    istart = channel_data_.first_global_k_layer_flux(2 /* compo */, 2 /* dir */) + 1;
    iend = channel_data_.last_global_k_layer_flux(2 /* compo */, 2 /* dir */) - 1;
    fill_g_compo(g_compo_z_dir_z_, nb_zfaces + 1, offset_to_global_k_layer, istart, iend, delta_z, true);
  }
}

void OpConvCentre4IJK_double::calculer(const IJK_Field_double& inputx, const IJK_Field_double& inputy, const IJK_Field_double& inputz,
                                       const IJK_Field_double& vx, const IJK_Field_double& vy, const IJK_Field_double& vz,
                                       IJK_Field_double& dvx, IJK_Field_double& dvy, IJK_Field_double& dvz)
{
  vx_ = &vx;
  vy_ = &vy;
  vz_ = &vz;
  inputx_ = &inputx;
  inputy_ = &inputy;
  inputz_ = &inputz;
  div_rho_u_ = 0;

  compute_set(dvx, dvy, dvz);

  vx_ = vy_ = vz_ = inputx_ = inputy_ = inputz_ = 0;
}

void OpConvCentre4IJK_double::ajouter(const IJK_Field_double& inputx, const IJK_Field_double& inputy, const IJK_Field_double& inputz,
                                      const IJK_Field_double& vx, const IJK_Field_double& vy, const IJK_Field_double& vz,
                                      IJK_Field_double& dvx, IJK_Field_double& dvy, IJK_Field_double& dvz)
{
  vx_ = &vx;
  vy_ = &vy;
  vz_ = &vz;
  inputx_ = &inputx;
  inputy_ = &inputy;
  inputz_ = &inputz;
  div_rho_u_ = 0;

  compute_add(dvx, dvy, dvz);

  vx_ = vy_ = vz_ = inputx_ = inputy_ = inputz_ = 0;
}

// Calcule, sur la couche k_layer de mailles, l'integrale sur la maille de div(rho_v)
// On calcule une epaisseur de mailles ghost a gauche dans les directions i et j
// (pour calcul de div(rhou) aux faces)
// On suppose que c'est periodique en i en j
static void calculer_div_rhou(const IJK_Field_double& rhovx, const IJK_Field_double& rhovy, const IJK_Field_double& rhovz,
                              IJK_Field_double& resu, int k_layer, const Operateur_IJK_data_channel& channel)
{
  const double surface_x = channel.get_delta_y() * channel.get_delta_z()[k_layer];
  const double surface_y = channel.get_delta_x() * channel.get_delta_z()[k_layer];
  const double surface_z = channel.get_delta_x() * channel.get_delta_y();
  const int ni = resu.ni();
  const int nj = resu.nj();
  // codage simple, non vectorise:
  for (int j = -1; j < nj; j++)
    for (int i = -1; i < ni; i++)
      {
        double divergence =
          (rhovx(i+1,j,k_layer) - rhovx(i,j,k_layer)) * surface_x
          + (rhovy(i,j+1,k_layer) - rhovy(i,j,k_layer)) * surface_y
          + (rhovz(i,j,k_layer+1) - rhovz(i,j,k_layer)) * surface_z;
        resu(i,j,k_layer) = divergence;
      }
}

void OpConvCentre4IJK_double::calculer_avec_u_div_rhou(const IJK_Field_double& rhovx, const IJK_Field_double& rhovy, const IJK_Field_double& rhovz,
                                                       const IJK_Field_double& vx, const IJK_Field_double& vy, const IJK_Field_double& vz,
                                                       IJK_Field_double& dvx, IJK_Field_double& dvy, IJK_Field_double& dvz,
                                                       IJK_Field_double& div_rho_u)
{
  vx_ = &vx;
  vy_ = &vy;
  vz_ = &vz;
  inputx_ = &rhovx;
  inputy_ = &rhovy;
  inputz_ = &rhovz;
  div_rho_u_ = &div_rho_u;
  last_computed_klayer_for_div_rhou_ = -1;
  calculer_div_rhou(*inputx_, *inputy_, *inputz_, *div_rho_u_, -1, channel_data_);

  compute_set(dvx, dvy, dvz);

  vx_ = vy_ = vz_ = inputx_ = inputy_ = inputz_ = 0;
  div_rho_u_ = 0;
}

void OpConvCentre4IJK_double::ajouter_avec_u_div_rhou(const IJK_Field_double& rhovx, const IJK_Field_double& rhovy, const IJK_Field_double& rhovz,
                                                      const IJK_Field_double& vx, const IJK_Field_double& vy, const IJK_Field_double& vz,
                                                      IJK_Field_double& dvx, IJK_Field_double& dvy, IJK_Field_double& dvz,
                                                      IJK_Field_double& div_rho_u)
{
  vx_ = &vx;
  vy_ = &vy;
  vz_ = &vz;
  inputx_ = &rhovx;
  inputy_ = &rhovy;
  inputz_ = &rhovz;
  div_rho_u_ = &div_rho_u;
  last_computed_klayer_for_div_rhou_ = -1;
  calculer_div_rhou(*inputx_, *inputy_, *inputz_, *div_rho_u_, -1, channel_data_);

  compute_add(dvx, dvy, dvz);

  vx_ = vy_ = vz_ = inputx_ = inputy_ = inputz_ = 0;
  div_rho_u_ = 0;
}


// Methode appelee a chaque couche de vitesses calculees, apres le calcul de la divergence du flux
//  div(u x rho_u) pour la composante x de vitesse, par Operateur_IJK_faces_base_double::compute_
// On ajoute ici u * div(rho_u) si c'est necessaire
void OpConvCentre4IJK_double::exec_after_divergence_flux_x(IJK_Field_double& resu, const int k_layer)
{
  if (div_rho_u_ == 0)
    return;


  // Calcul de div(rho_u) sur la couche, si besoin
  if (last_computed_klayer_for_div_rhou_ < k_layer)
    {
      // Il faut calculer une couche de div_rhou:
      calculer_div_rhou(*inputx_, *inputy_, *inputz_, *div_rho_u_, k_layer, channel_data_);
      last_computed_klayer_for_div_rhou_ = k_layer;
    }
  ConstIJK_double_ptr vitesse(*vx_, 0, 0, k_layer);
  ConstIJK_double_ptr div_rhou(*div_rho_u_, 0, 0, k_layer);
  IJK_double_ptr resu_ptr(resu, 0, 0, k_layer);

  const int nx = resu.ni();
  const int ny = resu.nj();
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)
          {
            Simd_double v, x_left, x_right;
            vitesse.get_center(i, v);
            // on prend div(rho_u) dans les elements a gauche et a droite de la face
            // rappel: l'element a gauche de la face i est a l'indice i-1
            div_rhou.get_left_center_x(i, x_left, x_right);
            // calcul du produit vitesse * div(rho_u)
            // en prenant div(rho_u) sur le volume de controle de la face (c'est l'integrale de div(rho_u)
            // qui est stocke, donc ici moyenne au sens volume fini)
            Simd_double a;
            resu_ptr.get_center(i, a);
            a += (x_left + x_right) * 0.5 * v;
            resu_ptr.put_val(i, a);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        vitesse.next_j();
        div_rhou.next_j();
        resu_ptr.next_j();
      }
  }

}
// Methode appelee a chaque couche de vitesses calculees, apres le calcul de la divergence du flux
//  div(u x rho_u) pour la composante y de vitesse, par Operateur_IJK_faces_base_double::compute_
// On ajoute ici u * div(rho_u) si c'est necessaire
void OpConvCentre4IJK_double::exec_after_divergence_flux_y(IJK_Field_double& resu, const int k_layer)
{
  if (div_rho_u_ == 0)
    return;


  // Calcul de div(rho_u) sur la couche, si besoin
  if (last_computed_klayer_for_div_rhou_ < k_layer)
    {
      // Il faut calculer une couche de div_rhou:
      calculer_div_rhou(*inputx_, *inputy_, *inputz_, *div_rho_u_, k_layer, channel_data_);
      last_computed_klayer_for_div_rhou_ = k_layer;
    }
  ConstIJK_double_ptr vitesse(*vy_, 0, 0, k_layer);
  ConstIJK_double_ptr div_rhou(*div_rho_u_, 0, 0, k_layer);
  IJK_double_ptr resu_ptr(resu, 0, 0, k_layer);

  const int nx = resu.ni();
  const int ny = resu.nj();
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)
          {
            Simd_double v, x_left, x_right;
            vitesse.get_center(i, v);
            // on prend div(rho_u) dans les elements a gauche et a droite de la face
            // rappel: l'element a gauche de la face i est a l'indice i-1
            div_rhou.get_left_center_y(i, x_left, x_right);
            // calcul du produit vitesse * div(rho_u)
            // en prenant div(rho_u) sur le volume de controle de la face (c'est l'integrale de div(rho_u)
            // qui est stocke, donc ici moyenne au sens volume fini)
            Simd_double a;
            resu_ptr.get_center(i, a);
            a += (x_left + x_right) * 0.5 * v;
            resu_ptr.put_val(i, a);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        vitesse.next_j();
        div_rhou.next_j();
        resu_ptr.next_j();
      }
  }

}
// Methode appelee a chaque couche de vitesses calculees, apres le calcul de la divergence du flux
//  div(u x rho_u) pour la composante z de vitesse, par Operateur_IJK_faces_base_double::compute_
// On ajoute ici u * div(rho_u) si c'est necessaire
void OpConvCentre4IJK_double::exec_after_divergence_flux_z(IJK_Field_double& resu, const int k_layer)
{
  if (div_rho_u_ == 0)
    return;


  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = 0;
  const int last_global_k_layer = resu.get_splitting().get_nb_items_global(IJK_Splitting::FACES_K, DIRECTION_K) - 1;

  if (!perio_k_ && (global_k_layer <= first_global_k_layer || global_k_layer >= last_global_k_layer))
    {
      return; // pas de calcul pour les faces en paroi (de toutes facons, v=0)
    }

  // Calcul de div(rho_u) sur la couche, si besoin
  if (last_computed_klayer_for_div_rhou_ < k_layer)
    {
      // Il faut calculer une couche de div_rhou:
      calculer_div_rhou(*inputx_, *inputy_, *inputz_, *div_rho_u_, k_layer, channel_data_);
      last_computed_klayer_for_div_rhou_ = k_layer;
    }
  ConstIJK_double_ptr vitesse(*vz_, 0, 0, k_layer);
  ConstIJK_double_ptr div_rhou(*div_rho_u_, 0, 0, k_layer);
  IJK_double_ptr resu_ptr(resu, 0, 0, k_layer);

  const int nx = resu.ni();
  const int ny = resu.nj();
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)
          {
            Simd_double v, x_left, x_right;
            vitesse.get_center(i, v);
            // on prend div(rho_u) dans les elements a gauche et a droite de la face
            // rappel: l'element a gauche de la face i est a l'indice i-1
            div_rhou.get_left_center_z(i, x_left, x_right);
            // calcul du produit vitesse * div(rho_u)
            // en prenant div(rho_u) sur le volume de controle de la face (c'est l'integrale de div(rho_u)
            // qui est stocke, donc ici moyenne au sens volume fini)
            Simd_double a;
            resu_ptr.get_center(i, a);
            a += (x_left + x_right) * 0.5 * v;
            resu_ptr.put_val(i, a);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        vitesse.next_j();
        div_rhou.next_j();
        resu_ptr.next_j();
      }
  }

}
// Description: compute fluxes in direction x for velocity component x
//  for the layer of fluxes k_layer
// 4-th order centered convection scheme
void OpConvCentre4IJK_double::compute_flux_x_vx(IJK_Field_local_double& resu, const int k_layer)
{
  // convected field
  const IJK_Field_local_double& src = *inputx_;
  // Convected vector field:
  ConstIJK_double_ptr src_ptr(src, 0, 0, k_layer);
  // Velocity in x direction (convecting velocity)
  ConstIJK_double_ptr vconvx_ptr(*vx_, 0, 0, k_layer);

  const int idir = 0;
  const int nx = src.ni() + 1;
  const int ny = src.nj();
  const int icompo = 0;

  // Result (fluxes in direction x for component x of the convected field)
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);



  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = channel_data_.first_global_k_layer_flux(icompo, idir);
  const int last_global_k_layer = channel_data_.last_global_k_layer_flux(icompo, idir);

  if (!perio_k_ && (global_k_layer <= first_global_k_layer || global_k_layer >= last_global_k_layer))
    {
      // We are in the wall
      putzero(resu);
      return;
    }

  // constant or variable coefficients depending on mesh.
  // second order degeneration is handeled here by setting appropriate coefficients:
  double g1, g2, g3, g4;
  double constant_factor0, constant_factor1;
  // surface of left face will be multiplied by velocity of right face, and reversed...
  channel_data_.get_surface_leftright(k_layer, icompo, idir, constant_factor1, constant_factor0);
  constant_factor0 *= 0.5;
  constant_factor1 *= 0.5;

  // Specific coding for uniform mesh in i and j, variable mesh in k,
  //  periodic in i and j, walls at bottom and top of k
  // Uniform mesh periodic everywhere so no special case.
  // We always have enough data for order 4:
  g1 = g4 = -0.0625;
  g2 = g3 = 0.5625;
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)     // specific coding for uniform mesh in x and y: surfaces are constant on an xy plane
          {
            Simd_double vit_0_0,vit_0,vit_1,vit_1_1; // 4 adjacent velocity values
            src_ptr.get_leftleft_left_center_right_x(i,vit_0_0,vit_0,vit_1,vit_1_1);
            Simd_double order4_velocity = g1 * vit_0_0 + g2 * vit_0 + g3 * vit_1 + g4 * vit_1_1;

            // get convecting velocity
            Simd_double vconv0, vconv1;
            vconvx_ptr.get_left_center_x(i, vconv0, vconv1);
            Simd_double psc = vconv0 * constant_factor0 + vconv1 * constant_factor1;
            // with porosity we would code this: vconv = (vconv0 * porosity0 + vconv1 * porosity1) * constant_factor;
            Simd_double flux_conv = order4_velocity * psc;

            resu_ptr.put_val(i, flux_conv);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        src_ptr.next_j();
        resu_ptr.next_j();
        vconvx_ptr.next_j();
      }
  }
}

// Description: compute fluxes in direction x for velocity component y
//  for the layer of fluxes k_layer
// 4-th order centered convection scheme
void OpConvCentre4IJK_double::compute_flux_x_vy(IJK_Field_local_double& resu, const int k_layer)
{
  // convected field
  const IJK_Field_local_double& src = *inputy_;
  // Convected vector field:
  ConstIJK_double_ptr src_ptr(src, 0, 0, k_layer);
  // Velocity in x direction (convecting velocity)
  ConstIJK_double_ptr vconvx_ptr(*vx_, 0, 0, k_layer);

  const int idir = 0;
  const int nx = src.ni() + 1;
  const int ny = src.nj();
  const int icompo = 1;
  // Result (fluxes in direction x for component y of the convected field)
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);



  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = channel_data_.first_global_k_layer_flux(icompo, idir);
  const int last_global_k_layer = channel_data_.last_global_k_layer_flux(icompo, idir);

  if (!perio_k_ && (global_k_layer <= first_global_k_layer || global_k_layer >= last_global_k_layer))
    {
      // We are in the wall
      putzero(resu);
      return;
    }

  // constant or variable coefficients depending on mesh.
  // second order degeneration is handeled here by setting appropriate coefficients:
  double g1, g2, g3, g4;
  double constant_factor0, constant_factor1;
  // surface of left face will be multiplied by velocity of right face, and reversed...
  channel_data_.get_surface_leftright(k_layer, icompo, idir, constant_factor1, constant_factor0);
  constant_factor0 *= 0.5;
  constant_factor1 *= 0.5;

  // Specific coding for uniform mesh in i and j, variable mesh in k,
  //  periodic in i and j, walls at bottom and top of k
  // Uniform mesh periodic everywhere so no special case.
  // We always have enough data for order 4:
  g1 = g4 = -0.0625;
  g2 = g3 = 0.5625;
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)     // specific coding for uniform mesh in x and y: surfaces are constant on an xy plane
          {
            Simd_double vit_0_0,vit_0,vit_1,vit_1_1; // 4 adjacent velocity values
            src_ptr.get_leftleft_left_center_right_x(i,vit_0_0,vit_0,vit_1,vit_1_1);
            Simd_double order4_velocity = g1 * vit_0_0 + g2 * vit_0 + g3 * vit_1 + g4 * vit_1_1;

            // get convecting velocity
            Simd_double vconv0, vconv1;
            vconvx_ptr.get_left_center_y(i, vconv0, vconv1);
            Simd_double psc = vconv0 * constant_factor0 + vconv1 * constant_factor1;
            // with porosity we would code this: vconv = (vconv0 * porosity0 + vconv1 * porosity1) * constant_factor;
            Simd_double flux_conv = order4_velocity * psc;

            resu_ptr.put_val(i, flux_conv);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        src_ptr.next_j();
        resu_ptr.next_j();
        vconvx_ptr.next_j();
      }
  }
}

// Description: compute fluxes in direction x for velocity component z
//  for the layer of fluxes k_layer
// 4-th order centered convection scheme
void OpConvCentre4IJK_double::compute_flux_x_vz(IJK_Field_local_double& resu, const int k_layer)
{
  // convected field
  const IJK_Field_local_double& src = *inputz_;
  // Convected vector field:
  ConstIJK_double_ptr src_ptr(src, 0, 0, k_layer);
  // Velocity in x direction (convecting velocity)
  ConstIJK_double_ptr vconvx_ptr(*vx_, 0, 0, k_layer);

  const int idir = 0;
  const int nx = src.ni() + 1;
  const int ny = src.nj();
  const int icompo = 2;
  // Result (fluxes in direction x for component z of the convected field)
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);



  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = channel_data_.first_global_k_layer_flux(icompo, idir);
  const int last_global_k_layer = channel_data_.last_global_k_layer_flux(icompo, idir);

  if (!perio_k_ && (global_k_layer <= first_global_k_layer || global_k_layer >= last_global_k_layer))
    {
      // We are in the wall
      putzero(resu);
      return;
    }

  // constant or variable coefficients depending on mesh.
  // second order degeneration is handeled here by setting appropriate coefficients:
  double g1, g2, g3, g4;
  double constant_factor0, constant_factor1;
  // surface of left face will be multiplied by velocity of right face, and reversed...
  channel_data_.get_surface_leftright(k_layer, icompo, idir, constant_factor1, constant_factor0);
  constant_factor0 *= 0.5;
  constant_factor1 *= 0.5;

  // Specific coding for uniform mesh in i and j, variable mesh in k,
  //  periodic in i and j, walls at bottom and top of k
  // Uniform mesh periodic everywhere so no special case.
  // We always have enough data for order 4:
  g1 = g4 = -0.0625;
  g2 = g3 = 0.5625;
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)     // specific coding for uniform mesh in x and y: surfaces are constant on an xy plane
          {
            Simd_double vit_0_0,vit_0,vit_1,vit_1_1; // 4 adjacent velocity values
            src_ptr.get_leftleft_left_center_right_x(i,vit_0_0,vit_0,vit_1,vit_1_1);
            Simd_double order4_velocity = g1 * vit_0_0 + g2 * vit_0 + g3 * vit_1 + g4 * vit_1_1;

            // get convecting velocity
            Simd_double vconv0, vconv1;
            vconvx_ptr.get_left_center_z(i, vconv0, vconv1);
            Simd_double psc = vconv0 * constant_factor0 + vconv1 * constant_factor1;
            // with porosity we would code this: vconv = (vconv0 * porosity0 + vconv1 * porosity1) * constant_factor;
            Simd_double flux_conv = order4_velocity * psc;

            resu_ptr.put_val(i, flux_conv);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        src_ptr.next_j();
        resu_ptr.next_j();
        vconvx_ptr.next_j();
      }
  }
}

// Description: compute fluxes in direction y for velocity component x
//  for the layer of fluxes k_layer
// 4-th order centered convection scheme
void OpConvCentre4IJK_double::compute_flux_y_vx(IJK_Field_local_double& resu, const int k_layer)
{
  // convected field
  const IJK_Field_local_double& src = *inputx_;
  // Convected vector field:
  ConstIJK_double_ptr src_ptr(src, 0, 0, k_layer);
  // Velocity in y direction (convecting velocity)
  ConstIJK_double_ptr vconvy_ptr(*vy_, 0, 0, k_layer);

  const int idir = 1;
  const int nx = src.ni();
  const int ny = src.nj() + 1;
  const int icompo = 0;

  // Result (fluxes in direction y for component x of the convected field)
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);



  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = channel_data_.first_global_k_layer_flux(icompo, idir);
  const int last_global_k_layer = channel_data_.last_global_k_layer_flux(icompo, idir);

  if (!perio_k_ && (global_k_layer <= first_global_k_layer || global_k_layer >= last_global_k_layer))
    {
      // We are in the wall
      putzero(resu);
      return;
    }

  // constant or variable coefficients depending on mesh.
  // second order degeneration is handeled here by setting appropriate coefficients:
  double g1, g2, g3, g4;
  double constant_factor0, constant_factor1;
  // surface of left face will be multiplied by velocity of right face, and reversed...
  channel_data_.get_surface_leftright(k_layer, icompo, idir, constant_factor1, constant_factor0);
  constant_factor0 *= 0.5;
  constant_factor1 *= 0.5;

  // Specific coding for uniform mesh in i and j, variable mesh in k,
  //  periodic in i and j, walls at bottom and top of k
  // Uniform mesh periodic everywhere so no special case.
  // We always have enough data for order 4:
  g1 = g4 = -0.0625;
  g2 = g3 = 0.5625;
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)     // specific coding for uniform mesh in x and y: surfaces are constant on an xy plane
          {
            Simd_double vit_0_0,vit_0,vit_1,vit_1_1; // 4 adjacent velocity values
            src_ptr.get_leftleft_left_center_right_y(i,vit_0_0,vit_0,vit_1,vit_1_1);
            Simd_double order4_velocity = g1 * vit_0_0 + g2 * vit_0 + g3 * vit_1 + g4 * vit_1_1;

            // get convecting velocity
            Simd_double vconv0, vconv1;
            vconvy_ptr.get_left_center_x(i, vconv0, vconv1);
            Simd_double psc = vconv0 * constant_factor0 + vconv1 * constant_factor1;
            // with porosity we would code this: vconv = (vconv0 * porosity0 + vconv1 * porosity1) * constant_factor;
            Simd_double flux_conv = order4_velocity * psc;

            resu_ptr.put_val(i, flux_conv);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        src_ptr.next_j();
        resu_ptr.next_j();
        vconvy_ptr.next_j();
      }
  }
}

// Description: compute fluxes in direction y for velocity component y
//  for the layer of fluxes k_layer
// 4-th order centered convection scheme
void OpConvCentre4IJK_double::compute_flux_y_vy(IJK_Field_local_double& resu, const int k_layer)
{
  // convected field
  const IJK_Field_local_double& src = *inputy_;
  // Convected vector field:
  ConstIJK_double_ptr src_ptr(src, 0, 0, k_layer);
  // Velocity in y direction (convecting velocity)
  ConstIJK_double_ptr vconvy_ptr(*vy_, 0, 0, k_layer);

  const int idir = 1;
  const int nx = src.ni();
  const int ny = src.nj() + 1;
  const int icompo = 1;
  // Result (fluxes in direction y for component y of the convected field)
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);



  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = channel_data_.first_global_k_layer_flux(icompo, idir);
  const int last_global_k_layer = channel_data_.last_global_k_layer_flux(icompo, idir);

  if (!perio_k_ && (global_k_layer <= first_global_k_layer || global_k_layer >= last_global_k_layer))
    {
      // We are in the wall
      putzero(resu);
      return;
    }

  // constant or variable coefficients depending on mesh.
  // second order degeneration is handeled here by setting appropriate coefficients:
  double g1, g2, g3, g4;
  double constant_factor0, constant_factor1;
  // surface of left face will be multiplied by velocity of right face, and reversed...
  channel_data_.get_surface_leftright(k_layer, icompo, idir, constant_factor1, constant_factor0);
  constant_factor0 *= 0.5;
  constant_factor1 *= 0.5;

  // Specific coding for uniform mesh in i and j, variable mesh in k,
  //  periodic in i and j, walls at bottom and top of k
  // Uniform mesh periodic everywhere so no special case.
  // We always have enough data for order 4:
  g1 = g4 = -0.0625;
  g2 = g3 = 0.5625;
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)     // specific coding for uniform mesh in x and y: surfaces are constant on an xy plane
          {
            Simd_double vit_0_0,vit_0,vit_1,vit_1_1; // 4 adjacent velocity values
            src_ptr.get_leftleft_left_center_right_y(i,vit_0_0,vit_0,vit_1,vit_1_1);
            Simd_double order4_velocity = g1 * vit_0_0 + g2 * vit_0 + g3 * vit_1 + g4 * vit_1_1;

            // get convecting velocity
            Simd_double vconv0, vconv1;
            vconvy_ptr.get_left_center_y(i, vconv0, vconv1);
            Simd_double psc = vconv0 * constant_factor0 + vconv1 * constant_factor1;
            // with porosity we would code this: vconv = (vconv0 * porosity0 + vconv1 * porosity1) * constant_factor;
            Simd_double flux_conv = order4_velocity * psc;

            resu_ptr.put_val(i, flux_conv);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        src_ptr.next_j();
        resu_ptr.next_j();
        vconvy_ptr.next_j();
      }
  }
}

// Description: compute fluxes in direction y for velocity component z
//  for the layer of fluxes k_layer
// 4-th order centered convection scheme
void OpConvCentre4IJK_double::compute_flux_y_vz(IJK_Field_local_double& resu, const int k_layer)
{
  // convected field
  const IJK_Field_local_double& src = *inputz_;
  // Convected vector field:
  ConstIJK_double_ptr src_ptr(src, 0, 0, k_layer);
  // Velocity in y direction (convecting velocity)
  ConstIJK_double_ptr vconvy_ptr(*vy_, 0, 0, k_layer);

  const int idir = 1;
  const int nx = src.ni();
  const int ny = src.nj() + 1;
  const int icompo = 2;
  // Result (fluxes in direction y for component z of the convected field)
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);



  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = channel_data_.first_global_k_layer_flux(icompo, idir);
  const int last_global_k_layer = channel_data_.last_global_k_layer_flux(icompo, idir);

  if (!perio_k_ && (global_k_layer <= first_global_k_layer || global_k_layer >= last_global_k_layer))
    {
      // We are in the wall
      putzero(resu);
      return;
    }

  // constant or variable coefficients depending on mesh.
  // second order degeneration is handeled here by setting appropriate coefficients:
  double g1, g2, g3, g4;
  double constant_factor0, constant_factor1;
  // surface of left face will be multiplied by velocity of right face, and reversed...
  channel_data_.get_surface_leftright(k_layer, icompo, idir, constant_factor1, constant_factor0);
  constant_factor0 *= 0.5;
  constant_factor1 *= 0.5;

  // Specific coding for uniform mesh in i and j, variable mesh in k,
  //  periodic in i and j, walls at bottom and top of k
  // Uniform mesh periodic everywhere so no special case.
  // We always have enough data for order 4:
  g1 = g4 = -0.0625;
  g2 = g3 = 0.5625;
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)     // specific coding for uniform mesh in x and y: surfaces are constant on an xy plane
          {
            Simd_double vit_0_0,vit_0,vit_1,vit_1_1; // 4 adjacent velocity values
            src_ptr.get_leftleft_left_center_right_y(i,vit_0_0,vit_0,vit_1,vit_1_1);
            Simd_double order4_velocity = g1 * vit_0_0 + g2 * vit_0 + g3 * vit_1 + g4 * vit_1_1;

            // get convecting velocity
            Simd_double vconv0, vconv1;
            vconvy_ptr.get_left_center_z(i, vconv0, vconv1);
            Simd_double psc = vconv0 * constant_factor0 + vconv1 * constant_factor1;
            // with porosity we would code this: vconv = (vconv0 * porosity0 + vconv1 * porosity1) * constant_factor;
            Simd_double flux_conv = order4_velocity * psc;

            resu_ptr.put_val(i, flux_conv);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        src_ptr.next_j();
        resu_ptr.next_j();
        vconvy_ptr.next_j();
      }
  }
}

// Description: compute fluxes in direction z for velocity component x
//  for the layer of fluxes k_layer
// 4-th order centered convection scheme
void OpConvCentre4IJK_double::compute_flux_z_vx(IJK_Field_local_double& resu, const int k_layer)
{
  // convected field
  const IJK_Field_local_double& src = *inputx_;
  // Convected vector field:
  ConstIJK_double_ptr src_ptr(src, 0, 0, k_layer);
  // Velocity in z direction (convecting velocity)
  ConstIJK_double_ptr vconvz_ptr(*vz_, 0, 0, k_layer);

  const int idir = 2;
  const int nx = src.ni();
  const int ny = src.nj();
  const int icompo = 0;

  // Result (fluxes in direction z for component x of the convected field)
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);



  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = channel_data_.first_global_k_layer_flux(icompo, idir);
  const int last_global_k_layer = channel_data_.last_global_k_layer_flux(icompo, idir);

  if (!perio_k_ && (global_k_layer <= first_global_k_layer || global_k_layer >= last_global_k_layer))
    {
      // We are in the wall
      putzero(resu);
      return;
    }

  // constant or variable coefficients depending on mesh.
  // second order degeneration is handeled here by setting appropriate coefficients:
  double g1, g2, g3, g4;
  double constant_factor0, constant_factor1;
  // surface of left face will be multiplied by velocity of right face, and reversed...
  channel_data_.get_surface_leftright(k_layer, icompo, idir, constant_factor1, constant_factor0);
  constant_factor0 *= 0.5;
  constant_factor1 *= 0.5;

  // Specific coding for uniform mesh in i and j, variable mesh in k,
  //  periodic in i and j, walls at bottom and top of k
  g1 = get_g(k_layer,icompo,idir,0);
  g2 = get_g(k_layer,icompo,idir,1);
  g3 = get_g(k_layer,icompo,idir,2);
  g4 = get_g(k_layer,icompo,idir,3);
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)     // specific coding for uniform mesh in x and y: surfaces are constant on an xy plane
          {
            Simd_double vit_0_0,vit_0,vit_1,vit_1_1; // 4 adjacent velocity values
            src_ptr.get_leftleft_left_center_right_z(i,vit_0_0,vit_0,vit_1,vit_1_1);
            Simd_double order4_velocity = g1 * vit_0_0 + g2 * vit_0 + g3 * vit_1 + g4 * vit_1_1;

            // get convecting velocity
            Simd_double vconv0, vconv1;
            vconvz_ptr.get_left_center_x(i, vconv0, vconv1);
            Simd_double psc = vconv0 * constant_factor0 + vconv1 * constant_factor1;
            // with porosity we would code this: vconv = (vconv0 * porosity0 + vconv1 * porosity1) * constant_factor;
            Simd_double flux_conv = order4_velocity * psc;

            resu_ptr.put_val(i, flux_conv);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        src_ptr.next_j();
        resu_ptr.next_j();
        vconvz_ptr.next_j();
      }
  }
}

// Description: compute fluxes in direction z for velocity component y
//  for the layer of fluxes k_layer
// 4-th order centered convection scheme
void OpConvCentre4IJK_double::compute_flux_z_vy(IJK_Field_local_double& resu, const int k_layer)
{
  // convected field
  const IJK_Field_local_double& src = *inputy_;
  // Convected vector field:
  ConstIJK_double_ptr src_ptr(src, 0, 0, k_layer);
  // Velocity in z direction (convecting velocity)
  ConstIJK_double_ptr vconvz_ptr(*vz_, 0, 0, k_layer);

  const int idir = 2;
  const int nx = src.ni();
  const int ny = src.nj();
  const int icompo = 1;
  // Result (fluxes in direction z for component y of the convected field)
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);



  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = channel_data_.first_global_k_layer_flux(icompo, idir);
  const int last_global_k_layer = channel_data_.last_global_k_layer_flux(icompo, idir);

  if (!perio_k_ && (global_k_layer <= first_global_k_layer || global_k_layer >= last_global_k_layer))
    {
      // We are in the wall
      putzero(resu);
      return;
    }

  // constant or variable coefficients depending on mesh.
  // second order degeneration is handeled here by setting appropriate coefficients:
  double g1, g2, g3, g4;
  double constant_factor0, constant_factor1;
  // surface of left face will be multiplied by velocity of right face, and reversed...
  channel_data_.get_surface_leftright(k_layer, icompo, idir, constant_factor1, constant_factor0);
  constant_factor0 *= 0.5;
  constant_factor1 *= 0.5;

  // Specific coding for uniform mesh in i and j, variable mesh in k,
  //  periodic in i and j, walls at bottom and top of k
  g1 = get_g(k_layer,icompo,idir,0);
  g2 = get_g(k_layer,icompo,idir,1);
  g3 = get_g(k_layer,icompo,idir,2);
  g4 = get_g(k_layer,icompo,idir,3);
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)     // specific coding for uniform mesh in x and y: surfaces are constant on an xy plane
          {
            Simd_double vit_0_0,vit_0,vit_1,vit_1_1; // 4 adjacent velocity values
            src_ptr.get_leftleft_left_center_right_z(i,vit_0_0,vit_0,vit_1,vit_1_1);
            Simd_double order4_velocity = g1 * vit_0_0 + g2 * vit_0 + g3 * vit_1 + g4 * vit_1_1;

            // get convecting velocity
            Simd_double vconv0, vconv1;
            vconvz_ptr.get_left_center_y(i, vconv0, vconv1);
            Simd_double psc = vconv0 * constant_factor0 + vconv1 * constant_factor1;
            // with porosity we would code this: vconv = (vconv0 * porosity0 + vconv1 * porosity1) * constant_factor;
            Simd_double flux_conv = order4_velocity * psc;

            resu_ptr.put_val(i, flux_conv);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        src_ptr.next_j();
        resu_ptr.next_j();
        vconvz_ptr.next_j();
      }
  }
}

// Description: compute fluxes in direction z for velocity component z
//  for the layer of fluxes k_layer
// 4-th order centered convection scheme
void OpConvCentre4IJK_double::compute_flux_z_vz(IJK_Field_local_double& resu, const int k_layer)
{
  // convected field
  const IJK_Field_local_double& src = *inputz_;
  // Convected vector field:
  ConstIJK_double_ptr src_ptr(src, 0, 0, k_layer);
  // Velocity in z direction (convecting velocity)
  ConstIJK_double_ptr vconvz_ptr(*vz_, 0, 0, k_layer);

  const int idir = 2;
  const int nx = src.ni();
  const int ny = src.nj();
  const int icompo = 2;
  // Result (fluxes in direction z for component z of the convected field)
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);



  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = channel_data_.first_global_k_layer_flux(icompo, idir);
  const int last_global_k_layer = channel_data_.last_global_k_layer_flux(icompo, idir);

  if (!perio_k_ && (global_k_layer <= first_global_k_layer || global_k_layer >= last_global_k_layer))
    {
      // We are in the wall
      putzero(resu);
      return;
    }

  // constant or variable coefficients depending on mesh.
  // second order degeneration is handeled here by setting appropriate coefficients:
  double g1, g2, g3, g4;
  double constant_factor0, constant_factor1;
  // surface of left face will be multiplied by velocity of right face, and reversed...
  channel_data_.get_surface_leftright(k_layer, icompo, idir, constant_factor1, constant_factor0);
  constant_factor0 *= 0.5;
  constant_factor1 *= 0.5;

  // Specific coding for uniform mesh in i and j, variable mesh in k,
  //  periodic in i and j, walls at bottom and top of k
  g1 = get_g(k_layer,icompo,idir,0);
  g2 = get_g(k_layer,icompo,idir,1);
  g3 = get_g(k_layer,icompo,idir,2);
  g4 = get_g(k_layer,icompo,idir,3);
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)     // specific coding for uniform mesh in x and y: surfaces are constant on an xy plane
          {
            Simd_double vit_0_0,vit_0,vit_1,vit_1_1; // 4 adjacent velocity values
            src_ptr.get_leftleft_left_center_right_z(i,vit_0_0,vit_0,vit_1,vit_1_1);
            Simd_double order4_velocity = g1 * vit_0_0 + g2 * vit_0 + g3 * vit_1 + g4 * vit_1_1;

            // get convecting velocity
            Simd_double vconv0, vconv1;
            vconvz_ptr.get_left_center_z(i, vconv0, vconv1);
            Simd_double psc = vconv0 * constant_factor0 + vconv1 * constant_factor1;
            // with porosity we would code this: vconv = (vconv0 * porosity0 + vconv1 * porosity1) * constant_factor;
            Simd_double flux_conv = order4_velocity * psc;

            resu_ptr.put_val(i, flux_conv);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        // instructions to perform to jump to next row
        src_ptr.next_j();
        resu_ptr.next_j();
        vconvz_ptr.next_j();
      }
  }
}


