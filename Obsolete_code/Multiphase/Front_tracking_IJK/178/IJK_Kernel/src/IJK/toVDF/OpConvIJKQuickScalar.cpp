/****************************************************************************
* Copyright (c) 2015 - 2016, CEA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
* 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
* 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
* OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*****************************************************************************/
/////////////////////////////////////////////////////////////////////////////
//
// File      : OpConvIJKQuickScalar.cpp
// Directory : $IJK_ROOT/src/IJK/OpVDF
//
/////////////////////////////////////////////////////////////////////////////
#include <OpConvIJKQuickScalar.h>
//
// WARNING: DO NOT EDIT THIS FILE! Only edit the template file OpConvIJKQuickScalar.cpp.P
//
#include <IJK_Field_simd_tools.h>



// Copy curv_fram values from layers 1 and 3 to layers 0 and 2
// (called at end of the computation of fluxes in z direction to keep the values
//  for the next layer).
static void shift_curv_fram(IJK_Field_local_double& tmp_curv_fram)
{
  const int ni = tmp_curv_fram.ni();
  const int nj = tmp_curv_fram.nj();
  int i, j;

  for (j = 0; j < nj; j++)
    for (i = 0; i < ni; i++)
      tmp_curv_fram(i,j,0) = tmp_curv_fram(i,j,1);

  for (j = 0; j < nj; j++)
    for (i = 0; i < ni; i++)
      tmp_curv_fram(i,j,2) = tmp_curv_fram(i,j,3);

}

inline Simd_double operator/(const Simd_double& x, const Simd_double& y)
{
  return SimdDivideMed(x, y);
}




void OpConvIJKQuickScalar_double::initialize(const IJK_Splitting& splitting)
{
  channel_data_.initialize(splitting);
  input_field_ = 0;
  input_velocity_x_ = 0;
  input_velocity_y_ = 0;
  input_velocity_z_ = 0;
}

void OpConvIJKQuickScalar_double::calculer(const IJK_Field_double& field,
                                           const IJK_Field_double& vx, const IJK_Field_double& vy, const IJK_Field_double& vz,
                                           IJK_Field_double& result)
{
  // Si ce test plante, c'est qu'on a oublie d'appeler la methode initialize() !!!
  assert(channel_data_.get_delta_z().size() == field.nk());

  input_velocity_x_ = &vx;
  input_velocity_y_ = &vy;
  input_velocity_z_ = &vz;
  input_field_ = &field;
  stored_curv_fram_layer_z_ = -1000; // put a non-existant layer index: curv_fram will be computed at first call
  // Storage for curvature and fram limiter. We need 1 ghost layer:
  //  flux at left of the leftmost field data requires curv and fram on the element at left
  //  flux at the right of the rightmost field data requires on the element at right
  // We need 4 layers of temporary storage: curv and fram, and, for each, two consecutive layers in z
  const int ni = field.ni();
  const int nj = field.nj();
  tmp_curv_fram_.allocate(ni, nj, 4, 1);
  compute_set(result);
  input_field_ = 0;
  input_velocity_x_ = 0;
  input_velocity_y_ = 0;
  input_velocity_z_ = 0;

}

void OpConvIJKQuickScalar_double::ajouter(const IJK_Field_double& field,
                                          const IJK_Field_double& vx, const IJK_Field_double& vy, const IJK_Field_double& vz,
                                          IJK_Field_double& result)
{
  // Si ce test plante, c'est qu'on a oublie d'appeler la methode initialize() !!!
  assert(channel_data_.get_delta_z().size() == field.nk());

  input_velocity_x_ = &vx;
  input_velocity_y_ = &vy;
  input_velocity_z_ = &vz;
  input_field_ = &field;
  stored_curv_fram_layer_z_ = -1000; // put a non-existant layer index: curv_fram will be computed at first call
  // Storage for curvature and fram limiter. We need 1 ghost layer:
  //  flux at left of the leftmost field data requires curv and fram on the element at left
  //  flux at the right of the rightmost field data requires on the element at right
  // We need 4 layers of temporary storage: curv and fram, and, for each, two consecutive layers in z
  const int ni = field.ni();
  const int nj = field.nj();
  tmp_curv_fram_.allocate(ni, nj, 4, 1);
  compute_add(result);
  input_field_ = 0;
  input_velocity_x_ = 0;
  input_velocity_y_ = 0;
  input_velocity_z_ = 0;

}



// compute the "curv" value and part of the fram limiter (in the Fram routine from Eval_Quick_VDF_Elem.h) for 3 adjacent T values
// store result in tmp_curv_fram_, z layer=1 (curv) and z layer=3 (fram)
void OpConvIJKQuickScalar_double::compute_curv_fram_x(int k_layer)
{

  ConstIJK_double_ptr input_field(*input_field_, 0, 0, k_layer);
  // Where to store result:
  IJK_double_ptr curv_values(tmp_curv_fram_, 0, 0, 1);
  IJK_double_ptr fram_values(tmp_curv_fram_, 0, 0, 3);
  const int ni = tmp_curv_fram_.ni();
  const int nj = tmp_curv_fram_.nj();


  // Compute invd1 and invd2 factors:
  const double inv_dx = 1./channel_data_.get_delta_x();
  const double factor01 = inv_dx * inv_dx;
  const double factor12 = factor01;
  {
    const int vsize = Simd_double::size();
    const int imax = ni+1;
    const int imax1 = imax - (vsize-1); // test to check for end of vectorizable part
    const int jmax = nj;
    for (int j = 0; ; j++)
      {
        int i;
        for (i = -1; i < 0; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_x(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (i = 0; i < imax1; i += vsize)
          {
            Simd_double t0, t1, t2;
            input_field.get_left_center_right_x(i, t0, t1, t2);
            Simd_double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            Simd_double smin = min(t0, t2);
            Simd_double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            Simd_double dsabs = SimdSelect(0, smax - smin, smax - smin, smin - smax);
            Simd_double ds = SimdSelect(dsabs, DMINFLOAT, 1., smax - smin);
            Simd_double sr = SimdSelect(dsabs, DMINFLOAT, 0., ((t1 - smin) / ds - 0.5) * 2.);
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (; i < imax; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_x(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        curv_values.next_j();
        fram_values.next_j();
      }
  }
}


void OpConvIJKQuickScalar_double::compute_flux_x(IJK_Field_local_double& resu, const int k_layer)
{
  compute_curv_fram_x(k_layer);

  ConstIJK_double_ptr velocity_x(*input_velocity_x_, 0, 0, k_layer);
  ConstIJK_double_ptr input_field(*input_field_, 0, 0, k_layer);
  ConstIJK_double_ptr curv_values(tmp_curv_fram_, 0, 0, 1); /* if z direction, "left" will be in layer 0 */
  ConstIJK_double_ptr fram_values(tmp_curv_fram_, 0, 0, 3); /* if z direction, "left" is in layer 2 */
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);
  const int nx = input_field_->ni() + 1;
  const int ny = input_field_->nj();
  const double dx = channel_data_.get_delta_x();
  const double surface = channel_data_.get_delta_y() * channel_data_.get_delta_z()[k_layer];


  const double dx_squared_over_8 = dx * dx * 0.125;
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)
          {
            Simd_double velocity;
            velocity_x.get_center(i, velocity);
            Simd_double T0, T1; // scalar value at left and at right of the computed flux
            Simd_double fram0, fram1;
            Simd_double curv0, curv1;
            input_field.get_left_center_x(i, T0, T1);
            fram_values.get_left_center_x(i, fram0, fram1);
            curv_values.get_left_center_x(i, curv0, curv1);
            Simd_double fram = max(fram0, fram1);
            Simd_double curv    = select_double(velocity, 0., curv1, curv0);
            Simd_double T_amont = select_double(velocity, 0., T1 /* if velocity < 0 */, T0 /* if velocity > 0 */);
            Simd_double flux = (T0 + T1) * 0.5 - dx_squared_over_8 * curv;
            flux = ((1. - fram) * flux + fram * T_amont) * velocity * surface;

            resu_ptr.put_val(i, flux);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        velocity_x.next_j();
        fram_values.next_j();
        curv_values.next_j();
        resu_ptr.next_j();
      }
  }

}

// compute the "curv" value and part of the fram limiter (in the Fram routine from Eval_Quick_VDF_Elem.h) for 3 adjacent T values
// store result in tmp_curv_fram_, z layer=1 (curv) and z layer=3 (fram)
void OpConvIJKQuickScalar_double::compute_curv_fram_y(int k_layer)
{

  ConstIJK_double_ptr input_field(*input_field_, 0, -1, k_layer);
  // Where to store result:
  IJK_double_ptr curv_values(tmp_curv_fram_, 0, -1, 1);
  IJK_double_ptr fram_values(tmp_curv_fram_, 0, -1, 3);
  const int ni = tmp_curv_fram_.ni();
  const int nj = tmp_curv_fram_.nj();


  // Compute invd1 and invd2 factors:
  const double inv_dy = 1. / channel_data_.get_delta_y();
  const double factor01 = inv_dy * inv_dy;
  const double factor12 = factor01;
  {
    const int vsize = Simd_double::size();
    const int imax = ni;
    const int imax1 = imax - (vsize-1); // test to check for end of vectorizable part
    const int jmax = nj+1;
    for (int j = -1; ; j++)
      {
        int i;
        for (i = 0; i < 0; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_y(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (i = 0; i < imax1; i += vsize)
          {
            Simd_double t0, t1, t2;
            input_field.get_left_center_right_y(i, t0, t1, t2);
            Simd_double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            Simd_double smin = min(t0, t2);
            Simd_double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            Simd_double dsabs = SimdSelect(0, smax - smin, smax - smin, smin - smax);
            Simd_double ds = SimdSelect(dsabs, DMINFLOAT, 1., smax - smin);
            Simd_double sr = SimdSelect(dsabs, DMINFLOAT, 0., ((t1 - smin) / ds - 0.5) * 2.);
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (; i < imax; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_y(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        curv_values.next_j();
        fram_values.next_j();
      }
  }
}


void OpConvIJKQuickScalar_double::compute_flux_y(IJK_Field_local_double& resu, const int k_layer)
{
  compute_curv_fram_y(k_layer);

  ConstIJK_double_ptr velocity_y(*input_velocity_y_, 0, 0, k_layer);
  ConstIJK_double_ptr input_field(*input_field_, 0, 0, k_layer);
  ConstIJK_double_ptr curv_values(tmp_curv_fram_, 0, 0, 1); /* if z direction, "left" will be in layer 0 */
  ConstIJK_double_ptr fram_values(tmp_curv_fram_, 0, 0, 3); /* if z direction, "left" is in layer 2 */
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);
  const int nx = input_field_->ni();
  const int ny = input_field_->nj() + 1;
  const double dx = channel_data_.get_delta_y();
  const double surface = channel_data_.get_delta_x() * channel_data_.get_delta_z()[k_layer];

  const double dx_squared_over_8 = dx * dx * 0.125;
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)
          {
            Simd_double velocity;
            velocity_y.get_center(i, velocity);
            Simd_double T0, T1; // scalar value at left and at right of the computed flux
            Simd_double fram0, fram1;
            Simd_double curv0, curv1;
            input_field.get_left_center_y(i, T0, T1);
            fram_values.get_left_center_y(i, fram0, fram1);
            curv_values.get_left_center_y(i, curv0, curv1);
            Simd_double fram = max(fram0, fram1);
            Simd_double curv    = select_double(velocity, 0., curv1, curv0);
            Simd_double T_amont = select_double(velocity, 0., T1 /* if velocity < 0 */, T0 /* if velocity > 0 */);
            Simd_double flux = (T0 + T1) * 0.5 - dx_squared_over_8 * curv;
            flux = ((1. - fram) * flux + fram * T_amont) * velocity * surface;

            resu_ptr.put_val(i, flux);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        velocity_y.next_j();
        fram_values.next_j();
        curv_values.next_j();
        resu_ptr.next_j();
      }
  }

}

// compute the "curv" value and part of the fram limiter (in the Fram routine from Eval_Quick_VDF_Elem.h) for 3 adjacent T values
// store result in tmp_curv_fram_, z layer=1 (curv) and z layer=3 (fram)
void OpConvIJKQuickScalar_double::compute_curv_fram_z(int k_layer)
{

  ConstIJK_double_ptr input_field(*input_field_, 0, 0, k_layer);
  // Where to store result:
  IJK_double_ptr curv_values(tmp_curv_fram_, 0, 0, 1);
  IJK_double_ptr fram_values(tmp_curv_fram_, 0, 0, 3);
  const int ni = tmp_curv_fram_.ni();
  const int nj = tmp_curv_fram_.nj();

  // Are we on the wall ?
  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = 0;
  const int last_global_k_layer = channel_data_.nb_elem_k_tot();

  if (global_k_layer == first_global_k_layer || global_k_layer == last_global_k_layer)
    {
      for (int j = 0; j < nj; j++)
        for (int i = 0; i < ni; i++)
          tmp_curv_fram_(i, j, 1) = 0.;
      for (int j = 0; j < nj; j++)
        for (int i = 0; i < ni; i++)
          tmp_curv_fram_(i, j, 3) = 1.; // fram = 1 => upwind scheme on first layer of cells in z direction.

      return;
    }

  // Compute invd1 and invd2 factors:
  const double dz0 = channel_data_.get_delta_z()[k_layer-1];
  const double dz1 = channel_data_.get_delta_z()[k_layer];
  const double dz2 = channel_data_.get_delta_z()[k_layer+1];
  const double factor01 = 1. / (dz1 * (dz0 + dz1) * 0.5);
  const double factor12 = 1. / (dz1 * (dz1 + dz2) * 0.5);
  {
    const int vsize = Simd_double::size();
    const int imax = ni;
    const int imax1 = imax - (vsize-1); // test to check for end of vectorizable part
    const int jmax = nj;
    for (int j = 0; ; j++)
      {
        int i;
        for (i = 0; i < 0; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_z(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (i = 0; i < imax1; i += vsize)
          {
            Simd_double t0, t1, t2;
            input_field.get_left_center_right_z(i, t0, t1, t2);
            Simd_double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            Simd_double smin = min(t0, t2);
            Simd_double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            Simd_double dsabs = SimdSelect(0, smax - smin, smax - smin, smin - smax);
            Simd_double ds = SimdSelect(dsabs, DMINFLOAT, 1., smax - smin);
            Simd_double sr = SimdSelect(dsabs, DMINFLOAT, 0., ((t1 - smin) / ds - 0.5) * 2.);
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (; i < imax; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_z(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        curv_values.next_j();
        fram_values.next_j();
      }
  }
}


void OpConvIJKQuickScalar_double::compute_flux_z(IJK_Field_local_double& resu, const int k_layer)
{
  // The previous layer of curv and fram values might have been computed already
  if (stored_curv_fram_layer_z_ != k_layer-1)
    {
      compute_curv_fram_z(k_layer-1);
      shift_curv_fram(tmp_curv_fram_);
    }
  compute_curv_fram_z(k_layer);

  ConstIJK_double_ptr velocity_z(*input_velocity_z_, 0, 0, k_layer);
  ConstIJK_double_ptr input_field(*input_field_, 0, 0, k_layer);
  ConstIJK_double_ptr curv_values(tmp_curv_fram_, 0, 0, 1); /* if z direction, "left" will be in layer 0 */
  ConstIJK_double_ptr fram_values(tmp_curv_fram_, 0, 0, 3); /* if z direction, "left" is in layer 2 */
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);
  const int nx = input_field_->ni();
  const int ny = input_field_->nj();
  const double dx = (channel_data_.get_delta_z()[k_layer-1] + channel_data_.get_delta_z()[k_layer]) * 0.5;
  const double surface = channel_data_.get_delta_x() * channel_data_.get_delta_y();
  // Are we on the wall ?
  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = 0;
  const int last_global_k_layer = channel_data_.nb_elem_k_tot();

  if (global_k_layer == first_global_k_layer || global_k_layer == last_global_k_layer)
    {
      // We are on the wall, zero flux
      putzero(resu);
      return;
    }

  const double dx_squared_over_8 = dx * dx * 0.125;
  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)
          {
            Simd_double velocity;
            velocity_z.get_center(i, velocity);
            Simd_double T0, T1; // scalar value at left and at right of the computed flux
            Simd_double fram0, fram1;
            Simd_double curv0, curv1;
            input_field.get_left_center_z(i, T0, T1);
            fram_values.get_left_center_z(i, fram0, fram1);
            curv_values.get_left_center_z(i, curv0, curv1);
            Simd_double fram = max(fram0, fram1);
            Simd_double curv    = select_double(velocity, 0., curv1, curv0);
            Simd_double T_amont = select_double(velocity, 0., T1 /* if velocity < 0 */, T0 /* if velocity > 0 */);
            Simd_double flux = (T0 + T1) * 0.5 - dx_squared_over_8 * curv;
            flux = ((1. - fram) * flux + fram * T_amont) * velocity * surface;

            resu_ptr.put_val(i, flux);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        velocity_z.next_j();
        fram_values.next_j();
        curv_values.next_j();
        resu_ptr.next_j();
      }
  }

  // store curv and fram for next layer of fluxes in z direction
  shift_curv_fram(tmp_curv_fram_);
  stored_curv_fram_layer_z_ = k_layer;
}

void OpConvCentre2IJKScalar_double::initialize(const IJK_Splitting& splitting)
{
  channel_data_.initialize(splitting);
  input_field_ = 0;
  input_velocity_x_ = 0;
  input_velocity_y_ = 0;
  input_velocity_z_ = 0;
}

void OpConvCentre2IJKScalar_double::calculer(const IJK_Field_double& field,
                                             const IJK_Field_double& vx, const IJK_Field_double& vy, const IJK_Field_double& vz,
                                             IJK_Field_double& result)
{
  // Si ce test plante, c'est qu'on a oublie d'appeler la methode initialize() !!!
  assert(channel_data_.get_delta_z().size() == field.nk());

  input_velocity_x_ = &vx;
  input_velocity_y_ = &vy;
  input_velocity_z_ = &vz;
  input_field_ = &field;
  stored_curv_fram_layer_z_ = -1000; // put a non-existant layer index: curv_fram will be computed at first call
  // Storage for curvature and fram limiter. We need 1 ghost layer:
  //  flux at left of the leftmost field data requires curv and fram on the element at left
  //  flux at the right of the rightmost field data requires on the element at right
  // We need 4 layers of temporary storage: curv and fram, and, for each, two consecutive layers in z
  const int ni = field.ni();
  const int nj = field.nj();
  tmp_curv_fram_.allocate(ni, nj, 4, 1);
  compute_set(result);
  input_field_ = 0;
  input_velocity_x_ = 0;
  input_velocity_y_ = 0;
  input_velocity_z_ = 0;

}

void OpConvCentre2IJKScalar_double::ajouter(const IJK_Field_double& field,
                                            const IJK_Field_double& vx, const IJK_Field_double& vy, const IJK_Field_double& vz,
                                            IJK_Field_double& result)
{
  // Si ce test plante, c'est qu'on a oublie d'appeler la methode initialize() !!!
  assert(channel_data_.get_delta_z().size() == field.nk());

  input_velocity_x_ = &vx;
  input_velocity_y_ = &vy;
  input_velocity_z_ = &vz;
  input_field_ = &field;
  stored_curv_fram_layer_z_ = -1000; // put a non-existant layer index: curv_fram will be computed at first call
  // Storage for curvature and fram limiter. We need 1 ghost layer:
  //  flux at left of the leftmost field data requires curv and fram on the element at left
  //  flux at the right of the rightmost field data requires on the element at right
  // We need 4 layers of temporary storage: curv and fram, and, for each, two consecutive layers in z
  const int ni = field.ni();
  const int nj = field.nj();
  tmp_curv_fram_.allocate(ni, nj, 4, 1);
  compute_add(result);
  input_field_ = 0;
  input_velocity_x_ = 0;
  input_velocity_y_ = 0;
  input_velocity_z_ = 0;

}



// compute the "curv" value and part of the fram limiter (in the Fram routine from Eval_Quick_VDF_Elem.h) for 3 adjacent T values
// store result in tmp_curv_fram_, z layer=1 (curv) and z layer=3 (fram)
void OpConvCentre2IJKScalar_double::compute_curv_fram_x(int k_layer)
{

  ConstIJK_double_ptr input_field(*input_field_, 0, 0, k_layer);
  // Where to store result:
  IJK_double_ptr curv_values(tmp_curv_fram_, 0, 0, 1);
  IJK_double_ptr fram_values(tmp_curv_fram_, 0, 0, 3);
  const int ni = tmp_curv_fram_.ni();
  const int nj = tmp_curv_fram_.nj();


  // Compute invd1 and invd2 factors:
  const double inv_dx = 1./channel_data_.get_delta_x();
  const double factor01 = inv_dx * inv_dx;
  const double factor12 = factor01;
  {
    const int vsize = Simd_double::size();
    const int imax = ni+1;
    const int imax1 = imax - (vsize-1); // test to check for end of vectorizable part
    const int jmax = nj;
    for (int j = 0; ; j++)
      {
        int i;
        for (i = -1; i < 0; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_x(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (i = 0; i < imax1; i += vsize)
          {
            Simd_double t0, t1, t2;
            input_field.get_left_center_right_x(i, t0, t1, t2);
            Simd_double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            Simd_double smin = min(t0, t2);
            Simd_double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            Simd_double dsabs = SimdSelect(0, smax - smin, smax - smin, smin - smax);
            Simd_double ds = SimdSelect(dsabs, DMINFLOAT, 1., smax - smin);
            Simd_double sr = SimdSelect(dsabs, DMINFLOAT, 0., ((t1 - smin) / ds - 0.5) * 2.);
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (; i < imax; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_x(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        curv_values.next_j();
        fram_values.next_j();
      }
  }
}


void OpConvCentre2IJKScalar_double::compute_flux_x(IJK_Field_local_double& resu, const int k_layer)
{

  ConstIJK_double_ptr velocity_x(*input_velocity_x_, 0, 0, k_layer);
  ConstIJK_double_ptr input_field(*input_field_, 0, 0, k_layer);
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);
  const int nx = input_field_->ni() + 1;
  const int ny = input_field_->nj();
  const double surface = channel_data_.get_delta_y() * channel_data_.get_delta_z()[k_layer];


  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)
          {
            Simd_double velocity;
            velocity_x.get_center(i, velocity);
            Simd_double T0, T1; // scalar value at left and at right of the computed flux
            input_field.get_left_center_x(i, T0, T1);
            Simd_double flux = (T0 + T1) * 0.5;
            flux = flux * velocity * surface;
            resu_ptr.put_val(i, flux);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        velocity_x.next_j();
        resu_ptr.next_j();
      }
  }

}

// compute the "curv" value and part of the fram limiter (in the Fram routine from Eval_Quick_VDF_Elem.h) for 3 adjacent T values
// store result in tmp_curv_fram_, z layer=1 (curv) and z layer=3 (fram)
void OpConvCentre2IJKScalar_double::compute_curv_fram_y(int k_layer)
{

  ConstIJK_double_ptr input_field(*input_field_, 0, -1, k_layer);
  // Where to store result:
  IJK_double_ptr curv_values(tmp_curv_fram_, 0, -1, 1);
  IJK_double_ptr fram_values(tmp_curv_fram_, 0, -1, 3);
  const int ni = tmp_curv_fram_.ni();
  const int nj = tmp_curv_fram_.nj();


  // Compute invd1 and invd2 factors:
  const double inv_dy = 1. / channel_data_.get_delta_y();
  const double factor01 = inv_dy * inv_dy;
  const double factor12 = factor01;
  {
    const int vsize = Simd_double::size();
    const int imax = ni;
    const int imax1 = imax - (vsize-1); // test to check for end of vectorizable part
    const int jmax = nj+1;
    for (int j = -1; ; j++)
      {
        int i;
        for (i = 0; i < 0; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_y(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (i = 0; i < imax1; i += vsize)
          {
            Simd_double t0, t1, t2;
            input_field.get_left_center_right_y(i, t0, t1, t2);
            Simd_double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            Simd_double smin = min(t0, t2);
            Simd_double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            Simd_double dsabs = SimdSelect(0, smax - smin, smax - smin, smin - smax);
            Simd_double ds = SimdSelect(dsabs, DMINFLOAT, 1., smax - smin);
            Simd_double sr = SimdSelect(dsabs, DMINFLOAT, 0., ((t1 - smin) / ds - 0.5) * 2.);
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (; i < imax; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_y(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        curv_values.next_j();
        fram_values.next_j();
      }
  }
}


void OpConvCentre2IJKScalar_double::compute_flux_y(IJK_Field_local_double& resu, const int k_layer)
{

  ConstIJK_double_ptr velocity_y(*input_velocity_y_, 0, 0, k_layer);
  ConstIJK_double_ptr input_field(*input_field_, 0, 0, k_layer);
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);
  const int nx = input_field_->ni();
  const int ny = input_field_->nj() + 1;
  const double surface = channel_data_.get_delta_x() * channel_data_.get_delta_z()[k_layer];

  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)
          {
            Simd_double velocity;
            velocity_y.get_center(i, velocity);
            Simd_double T0, T1; // scalar value at left and at right of the computed flux
            input_field.get_left_center_y(i, T0, T1);
            Simd_double flux = (T0 + T1) * 0.5;
            flux = flux * velocity * surface;
            resu_ptr.put_val(i, flux);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        velocity_y.next_j();
        resu_ptr.next_j();
      }
  }

}

// compute the "curv" value and part of the fram limiter (in the Fram routine from Eval_Quick_VDF_Elem.h) for 3 adjacent T values
// store result in tmp_curv_fram_, z layer=1 (curv) and z layer=3 (fram)
void OpConvCentre2IJKScalar_double::compute_curv_fram_z(int k_layer)
{

  ConstIJK_double_ptr input_field(*input_field_, 0, 0, k_layer);
  // Where to store result:
  IJK_double_ptr curv_values(tmp_curv_fram_, 0, 0, 1);
  IJK_double_ptr fram_values(tmp_curv_fram_, 0, 0, 3);
  const int ni = tmp_curv_fram_.ni();
  const int nj = tmp_curv_fram_.nj();

  // Are we on the wall ?
  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = 0;
  const int last_global_k_layer = channel_data_.nb_elem_k_tot();

  if (global_k_layer == first_global_k_layer || global_k_layer == last_global_k_layer)
    {
      for (int j = 0; j < nj; j++)
        for (int i = 0; i < ni; i++)
          tmp_curv_fram_(i, j, 1) = 0.;
      for (int j = 0; j < nj; j++)
        for (int i = 0; i < ni; i++)
          tmp_curv_fram_(i, j, 3) = 1.; // fram = 1 => upwind scheme on first layer of cells in z direction.

      return;
    }

  // Compute invd1 and invd2 factors:
  const double dz0 = channel_data_.get_delta_z()[k_layer-1];
  const double dz1 = channel_data_.get_delta_z()[k_layer];
  const double dz2 = channel_data_.get_delta_z()[k_layer+1];
  const double factor01 = 1. / (dz1 * (dz0 + dz1) * 0.5);
  const double factor12 = 1. / (dz1 * (dz1 + dz2) * 0.5);
  {
    const int vsize = Simd_double::size();
    const int imax = ni;
    const int imax1 = imax - (vsize-1); // test to check for end of vectorizable part
    const int jmax = nj;
    for (int j = 0; ; j++)
      {
        int i;
        for (i = 0; i < 0; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_z(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (i = 0; i < imax1; i += vsize)
          {
            Simd_double t0, t1, t2;
            input_field.get_left_center_right_z(i, t0, t1, t2);
            Simd_double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            Simd_double smin = min(t0, t2);
            Simd_double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            Simd_double dsabs = SimdSelect(0, smax - smin, smax - smin, smin - smax);
            Simd_double ds = SimdSelect(dsabs, DMINFLOAT, 1., smax - smin);
            Simd_double sr = SimdSelect(dsabs, DMINFLOAT, 0., ((t1 - smin) / ds - 0.5) * 2.);
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        for (; i < imax; i++)
          {
            double t0, t1, t2;
            input_field.get_left_center_right_z(i, t0, t1, t2);
            double curv = (t2 - t1) * factor12 - (t1 - t0) * factor01;
            curv_values.put_val(i, curv);
            double smin = min(t0, t2);
            double smax = max(t0, t2);
            // Compared to original code (Eval_Quick_VDF_Elem.h), we first compute the 4th power,
            // then take the max (dabs is then useless)
            double sr = dabs(smax - smin)<DMINFLOAT ? 0. : ((t1 - smin) / (smax - smin) - 0.5) * 2.;
            sr *= sr;
            sr *= sr;
            sr = min(sr, 1.);
            fram_values.put_val(i, sr);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        curv_values.next_j();
        fram_values.next_j();
      }
  }
}


void OpConvCentre2IJKScalar_double::compute_flux_z(IJK_Field_local_double& resu, const int k_layer)
{

  ConstIJK_double_ptr velocity_z(*input_velocity_z_, 0, 0, k_layer);
  ConstIJK_double_ptr input_field(*input_field_, 0, 0, k_layer);
  IJK_double_ptr resu_ptr(resu, 0, 0, 0);
  const int nx = input_field_->ni();
  const int ny = input_field_->nj();
  const double surface = channel_data_.get_delta_x() * channel_data_.get_delta_y();
  // Are we on the wall ?
  const int global_k_layer = k_layer + channel_data_.offset_to_global_k_layer();
  // global index of the layer of flux of the wall
  //  (assume one walls at zmin and zmax)
  const int first_global_k_layer = 0;
  const int last_global_k_layer = channel_data_.nb_elem_k_tot();

  if (global_k_layer == first_global_k_layer || global_k_layer == last_global_k_layer)
    {
      // We are on the wall, zero flux
      putzero(resu);
      return;
    }

  {
    const int imax = nx;
    const int jmax = ny;
    const int vsize = Simd_double::size();
    for (int j = 0; ; j++)
      {
        for (int i = 0; i < imax; i += vsize)
          {
            Simd_double velocity;
            velocity_z.get_center(i, velocity);
            Simd_double T0, T1; // scalar value at left and at right of the computed flux
            input_field.get_left_center_z(i, T0, T1);
            Simd_double flux = (T0 + T1) * 0.5;
            flux = flux * velocity * surface;
            resu_ptr.put_val(i, flux);
          }
        // do not execute end_iloop at last iteration (because of assert on valid j+1)
        if (j+1==jmax)
          break;
        input_field.next_j();
        velocity_z.next_j();
        resu_ptr.next_j();
      }
  }

  // store curv and fram for next layer of fluxes in z direction
  shift_curv_fram(tmp_curv_fram_);
  stored_curv_fram_layer_z_ = k_layer;
}

