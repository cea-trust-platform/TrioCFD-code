#!/bin/bash
write()
{
  file=$1
  if [ "`tail -1 $file 2>&1 | awk '{print $1}'`" != $MESH ]
  then
     [ -f $file ] && echo $ECHO_OPTS "\n\c" >> $file
     echo $ECHO_OPTS "$MESH $CELLS\c" >> $file
  fi
  if [ "$3" != "" ]
  then
     echo $ECHO_OPTS " $2($3\%)\c" >> $file
  else
     echo $ECHO_OPTS " $2\c" >> $file
  fi
}

rep=`basename $PWD`
prm=`ls ../*prm 2>/dev/null` 
echo "--------------------"
echo "post_run for $rep:"
echo "--------------------"

# Physical properties
python ../propertiesGeometry.py
cp propertiesGeometry.dat ..

# Extract number of cells and update the prm
err=`ls test.err .test.err 2>/dev/null`
CELLS=`awk '/Total number of elements/ && (NF==6) {gsub(":","",$NF);cells=$NF} END {print cells}' $err`
MESH=`echo $rep | awk -F_ '{print $NF}'`
sed -i "s?\$NUMBER_OF_ELEMENTS_$MESH\$ ?$CELLS ?g" $prm

#exit
# Profiling if binary _pg
[ -f gmon.out ] && [ gmon.out -nt test.cpu ] && [ ${exec%_pg} != $exec ] && gprof $exec 1>test.cpu && nedit test.cpu &

DIM=2 && [ "`grep ' 3D ' $prm`" != "" ] && DIM=3 # Dimension du cas
R=`awk '/RADIUS=/ {gsub("RADIUS=","",$1);print $1}' ../prepare`
W=`awk '/WIDTH=/ {gsub("WIDTH=","",$1);print $1}' ../prepare` && [ $DIM = 2 ] && W=1
L=`awk '/LENGTH=/ {gsub("LENGTH=","",$1);print $1}' ../prepare`
rho=`awk '/rho=/ {gsub("rho=","",$1);print $1}' ../prepare`

# Search for the column CYLINDER
colonne=`awk '(NR==3) {for (i=1;i<=NF;i++) if ($(i)=="CYLINDER") colonne=i} END {print colonne}' test_pb_Force_pression.out`
for file in test_pb_Force_pression.out test_pb_Contrainte_visqueuse.out
do
   [ "`awk -v colonne=$colonne '/# Bord/ || /# Boundary/ {print $colonne}' $file`" != "CYLINDER" ] && echo "Erreur, La colonne $colonne de $file doit contenir CYLINDER" && nedit && exit -1
done

######################################################################################
# Calculate from t=tmin the total drag and lift (viscous+pressure) exerted on cylinder
######################################################################################

U=`awk '/frontiere_ouverte_vitesse_imposee/ {print $5}' test.data`
tmax=`awk -v L=$L -v U=$U '/Backup of/ {tmax=$NF} END {print tmax}' test.err`
tmin=`awk -v L=$L -v U=$U '/Backup of/ {tmax=$NF} END {print 0.5*tmax}' test.err`
L_sur_U=`awk -v L=$L -v U=$U 'END {print L/U}' test.err`
echo "Analysis from $tmin to $tmax (L/U=$L_sur_U)"
echo | awk -v fp=test_pb_Force_pression.out -v fv=test_pb_Contrainte_visqueuse.out -v tmin=$tmin -v colonne=$colonne 'BEGIN {fic[0]=fp;fic[1]=fv} \
{\
   for (i=0;i<2;i++)\
   {\
      # On cherche la ligne Time pour connaitre la dimension \
      do {getline < fic[i]} while ($2!="Time");\
      dim=2;if ($5=="Fz") dim=3;\
      # On va jusqua tmin \
      do {getline < fic[i]} while ($1<tmin);\
      # On calcule la force totale fp+fv \
      n=0;\
      col=(colonne-3)*dim+2;\
      do\
      {\
         t[n]=$1;\
         fx[n]+=$(col);   # Drag\
	 fy[n]+=$(col+1); # Lift\
	 if (dim==3) fz[n]+=$(col+2);\
         n++;\
      }\
      while (getline<fic[i])\
      close(fic[i]);\
   }\
}\
END\
{\
      # Ecriture \
      print "# time Fx Fy";\
      for (i=0;i<n;i++) print t[i]" "fx[i]" "fy[i];\
} ' > force.dat

##############################################################
# Spectral analysis of the cylinder drag in the force.dat file
##############################################################
[ ! -f spectre_Cd.txt ] && ../Slotting force.dat 2 $tmin && mv -f spectre.txt spectre_Cd.txt
###################################
# Mean drag coefficient calculation
###################################
Cd=`echo | awk -v U=$U -v rho=$rho -v R=$R -v W=$W '/Moyenne de V1/ {print 0.01*int(100*$NF/(0.5*rho*U*U*2*R*W))}' spectre_Cd.txt`
echo "Cd=$Cd"
[ $U = 0.44 ] && exp=1.10
[ $U = 0.87 ] && exp=1.01
erreur_Cd=`echo $Cd $exp | awk '{print int(($1-$2)/$2*100)}'`
echo $Cd $exp $erreur_Cd > Cd.dat
write ../Cd_$U.dat $Cd $erreur_Cd

##############################################################
# Spectral analysis of the cylinder lift in the force.dat file
##############################################################
[ ! -f spectre_Cl.txt ] && ../Slotting force.dat 3 $tmin && mv -f spectre.txt spectre_Cl.txt
###################################
# RMS lift coefficient calculation
###################################
Cl=`echo | awk -v U=$U -v rho=$rho -v R=$R -v W=$W '/Ecart type de V1/ {print 0.001*int(1000*$NF/(0.5*rho*U*U*2*R*W))}' spectre_Cl.txt`
echo "Cl=$Cl"
[ $U = 0.44 ] && exp=0.038
[ $U = 0.87 ] && exp=0.064
erreur_Cl=`echo $Cl $exp | awk '{print int(($1-$2)/$2*100)}'`
echo $Cl $exp $erreur_Cl > Cl.dat
#write ../Cl_$U.dat $Cl $erreur_Cl 
write ../Cl_$U.dat $Cl

#####################################
# Analyse spectrale pour la frequence
#####################################
# On se base sur la frequence dominante du lift (page 508)
# Recupere la frequence depuis le fichier spectre
# On cherche le premier pic au dessus d'un seuil de 0.001 (premiere basse frequence)
frequence=`awk 'BEGIN {val=0;max=0.001} !/#/ {if ($2>max) {if (val>0 && $1/val>10) exit;max=$2;val=$1}} END {printf("%f",val)}' spectre_Cl.txt`

##################
# Plot the spectre
##################
#Inutile
#echo $ECHO_OPTS "set term png;set title \"Spectral analysis of cylinder lift\";set output \"spectre.png\";set log x\nplot \"spectre_Cl.txt\"\n" > plot
#gnuplot plot

#############################
# Strouhal number calculation
#############################
St=`echo "$frequence*2*$R/$U" | bc -l | awk '{print 0.001*int(1000*$1)}'`
echo "St=$St"
[ $U = 0.44 ] && exp=0.184
[ $U = 0.87 ] && exp=0.182
erreur_St=`echo "($St-$exp)/$exp*100" | bc -l | awk '{print int($1)}'`
echo $St $exp $erreur_St > St.dat
write ../St_$U.dat $St $erreur_St 
