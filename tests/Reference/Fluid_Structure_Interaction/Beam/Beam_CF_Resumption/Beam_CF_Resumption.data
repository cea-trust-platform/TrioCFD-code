# Poutre en flexion 3D laminar with ALE  #

dimension 3

Pb_hydraulique_ALE pb
Domaine_ALE dom

# BEGIN MESH #
Read_MED {
    domain dom
    file Poutre.med
}
# END MESH #

VerifierCoin dom { }


# For the Arbitrary Lagrangian-Eulerian framework: block to indicate the number of mobile
boundaries of the domain and specify the speed that must be imposed on them #
Imposer_vit_bords_ALE dom
{
    1 # number of mobile boundaries #
    Poutre     Champ_front_ALE_Beam 3  0.   0.  0.
}

Projection_ALE_boundary dom {
    1
    Poutre   3 0.367*2.6786*y*(cosh(2.6786*x)-cos(2.6786*x)-1.3622*sinh(2.6786*x)-1.3622*sin(2.6786*x))   0.367*(sinh(2.6786*x)-sin(2.6786*x)-1.3622*cosh(2.6786*x)+1.3622*cos(2.6786*x))  0.0

}
Beam_model dom
{
    nb_beam 1
    Name Poutre {
	    nb_modes 1 # number of modes #
	    direction 0 # x=0, y=1, z=2 #
	    Young_Module 60.e+6 # Pa #
	    Rho_beam 7500. # kg/m^3 #
	    NewmarkTimeScheme MA
	    Mass_and_stiffness_file_name vibr_pout2tube_coarse_EL.txt
	    Absc_file_name vibr_pout2tube_absc_coarse_EL.txt
	    CI_file_name vibr_pout2tube_coarse_EL_CI.txt
	    Modal_deformation_file_name  1 vibr_pout2tube_coarse_EL_phi_1.txt
	    Output_position_1D 1  500
	    Output_position_3D 1  0.7 0.02 0.02
	    Restart_file_name PoutreSaveBeamForRestart.txt
    }

}

# Solver used to solve the system giving the moving mesh velocity #
# Solver_moving_mesh_ALE dom { Cholesky { }  } #
Solver_moving_mesh_ALE dom { PETSC GCP { precond ssor { omega 1.5 } seuil 1e-12  } }

# I select a discretization #
VEFPreP1B ma_discretisation
# Lire ma_discretisation { P0 } #


# Time scheme, choice between: explicit or implicit #
Scheme_euler_implicit mon_schema
Read mon_schema
{
    # Time step #
    # Initial time [s] #
    tinit 0
    # Min time step #
    dt_min 1.e-15
    # Output criteria #
    # .out files printing period #
    dt_impr 5.e-7
    tcpumax 23.5
    # .sauv files printing period #
    periode_sauvegarde_securite_en_heures 9
    # facsec such as dt = facsec * min(dt(CFL),dt_max) ; for explicit scheme facsec <= 1. By default facsec equals to 1 #
    facsec 1
    facsec_max 100
    solveur implicite_ALE
    {
        solveur gmres { diag seuil 1.e-12 nb_it_max 20 }
    }
    # Stop if one of the following criteria is checked: #
    # End time [s] #
    tmax  10.
    # Max number of time steps #
    nb_pas_dt_max 10
    # Convergence threshold (see .dt_ev file) #
    seuil_statio 1.e-15
    # dt_max 5e-4 #
}

# Association between the different objects #
Associate pb dom
Associate pb mon_schema
Discretize pb ma_discretisation

Read pb
{
    # I define a medium #
    Fluide_Incompressible
    {
        mu Champ_Uniforme 1 1.007e-3
        rho Champ_Uniforme 1 1000
        # gravite Champ_Uniforme 3 0.0 0.0 0.0 #
    }
    Navier_Stokes_standard_ALE
    {
        # Pressure matrix solved with #
        solveur_pression PETSC GCP { precond ssor { omega 1.5 } seuil 1e-9  }
        # solveur_pression PETSC Cholesky { } #
        # Two operators are defined #
        convection {  ALE { muscl } } # A convective scheme for ALE framework : choice between: amont and muscl #
        diffusion { }
        # Uniform initial condition for velocity #
        initial_conditions {
            vitesse Champ_Uniforme 3 0.0 0. 0.
        }
        # Boundary conditions #
        boundary_conditions {
            Poutre  frontiere_ouverte_vitesse_imposee_ALE Champ_front_ALE_Beam 3  0. 0.  0.
            Wall  paroi_fixe
            In frontiere_ouverte_vitesse_imposee Champ_front_fonc_txyz 3 0. ((1.5*0.5)*(4.0)*x*(1-x)) 0.
            Out   frontiere_ouverte_pression_imposee Champ_front_Uniforme 1 0.
        }
    }
    Post_processing
    {
        # Fields #
        format lml
        fields dt_post 1e-3
        {
            pression_pa som
            vitesse som
            ALEMeshVelocity som
            ALEMeshTotalDisplacement som
        }
    }
resume_last_time single_hdf Beam_CF.sauv
Sauvegarde_simple single_hdf Beam_CF.sauv

}

# The problem is solved with #
Solve pb

# Not necessary keyword to finish #
End

